import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import numpy as np
from pymongo import MongoClient
import re
from sklearn.preprocessing import LabelEncoder
from datetime import datetime, timedelta
import warnings
warnings.filterwarnings('ignore')

# Page config v·ªõi favicon v√† layout
st.set_page_config(
    page_title="Job Analytics Dashboard",
    page_icon="üíº",
    layout="wide",
    initial_sidebar_state="expanded",
    menu_items={
        'Get Help': 'https://github.com',
        'Report a bug': "https://github.com",
        'About': "# Job Data Analytics Dashboard\nPh√¢n t√≠ch d·ªØ li·ªáu vi·ªác l√†m IT t·∫°i Vi·ªát Nam"
    }
)

# CSS cho giao di·ªán ƒë·∫πp
st.markdown("""
<style>
    /* Main layout */
    .main {
        padding-top: 1rem;
    }
    
    /* Sidebar styling */
    .css-1d391kg {
        background-color: #f8fafc !important;
        border-right: 2px solid #e2e8f0 !important;
    }
    
    /* Sidebar title */
    .css-1d391kg h1 {
        color: #1e40af !important;
        font-weight: 700 !important;
        font-size: 1.8rem !important;
        text-align: center !important;
        margin-bottom: 2rem !important;
        padding: 1rem 0 !important;
        border-bottom: 2px solid #3b82f6 !important;
    }
    
    /* Radio button container */
    .css-1d391kg .stRadio > div {
        flex-direction: column !important;
        gap: 0.5rem !important;
    }
    
    /* Radio button styling */
    .css-1d391kg .stRadio > div > label {
        background: white !important;
        border: 2px solid #e2e8f0 !important;
        border-radius: 8px !important;
        padding: 0.75rem 1rem !important;
        margin: 0.25rem 0 !important;
        cursor: pointer !important;
        transition: all 0.2s ease !important;
        width: 100% !important;
        text-align: center !important;
        font-weight: 500 !important;
        color: #475569 !important;
    }
    
    /* Radio button hover */
    .css-1d391kg .stRadio > div > label:hover {
        border-color: #3b82f6 !important;
        background: #eff6ff !important;
        color: #1e40af !important;
    }
    
    /* Active radio button */
    .css-1d391kg .stRadio > div > label[data-checked="true"] {
        background: #3b82f6 !important;
        border-color: #1d4ed8 !important;
        color: white !important;
        font-weight: 600 !important;
    }
    
    /* Hide radio circles */
    .css-1d391kg .stRadio input[type="radio"] {
        display: none !important;
    }
    
    .metric-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 1.5rem;
        border-radius: 15px;
        color: white;
        text-align: center;
        box-shadow: 0 8px 32px rgba(31, 38, 135, 0.37);
        backdrop-filter: blur(8px);
        border: 1px solid rgba(255, 255, 255, 0.18);
        margin-bottom: 1rem;
    }
    
    .metric-card.blue {
        background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
    }
    
    .metric-card.green {
        background: linear-gradient(135deg, #10b981 0%, #059669 100%);
    }
    
    .metric-card.purple {
        background: linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%);
    }
    
    .metric-card.orange {
        background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
    }
    
    .metric-value {
        font-size: 2.5rem;
        font-weight: bold;
        margin: 0;
    }
    
    .metric-label {
        font-size: 1rem;
        opacity: 0.9;
        margin: 0;
    }
    
    .chart-container {
        background: white;
        padding: 1.5rem;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        margin-bottom: 2rem;
    }
    
    .sidebar .sidebar-content {
        background: linear-gradient(180deg, #f8fafc 0%, #e2e8f0 100%);
    }
    
    h1 {
        color: #1e293b;
        font-weight: 700;
        text-align: center;
        margin-bottom: 0.5rem;
    }
    
    h2 {
        color: #374151;
        font-weight: 600;
        margin-top: 2rem;
    }
    
    h3 {
        color: #4b5563;
        font-weight: 500;
    }
    
    .stSelectbox > div > div {
        background-color: #f1f5f9;
        border-radius: 8px;
    }
    
    .filter-section {
        background: #f8fafc;
        padding: 1rem;
        border-radius: 8px;
        margin-bottom: 1rem;
    }
</style>
""", unsafe_allow_html=True)

# Kh·ªüi t·∫°o k·∫øt n·ªëi database
@st.cache_resource
def init_connection():
    try:
        client = MongoClient("mongodb://root:123456@localhost:27017/")
        db = client.job_data
        # Test connection by listing collections
        db.list_collection_names()
        return db
    except Exception as e:
        st.error(f"‚ùå L·ªói k·∫øt n·ªëi database: {e}")
        return None

@st.cache_data(ttl=300)  # Cache 5 ph√∫t
def load_data(collection_name=None):
    db = init_connection()
    if db is None:
        return pd.DataFrame()
    
    try:
        all_data = []
        
        if collection_name and collection_name != "T·∫•t c·∫£":
            collection = db[collection_name]
            data = list(collection.find({}))
            all_data.extend(data)
        else:
            collections = db.list_collection_names()
            for coll_name in collections:
                collection = db[coll_name]
                data = list(collection.find({}))
                for doc in data:
                    if 'category' not in doc:
                        doc['category'] = coll_name
                all_data.extend(data)
        
        if not all_data:
            return pd.DataFrame()
        
        df = pd.DataFrame(all_data)
        if '_id' in df.columns:
            df = df.drop('_id', axis=1)
        
        # C·∫£i thi·ªán data processing
        if 'salary_avg_million_vnd' in df.columns:
            df['salary_avg_million_vnd'] = pd.to_numeric(df['salary_avg_million_vnd'], errors='coerce').fillna(0)
        
        if 'update_date' in df.columns:
            df['update_date'] = pd.to_datetime(df['update_date'], errors='coerce')
        
        return df
    except Exception as e:
        st.error(f"‚ùå L·ªói t·∫£i d·ªØ li·ªáu: {e}")
        return pd.DataFrame()

def process_data(df):
    if df.empty:
        return df
    
    # X·ª≠ l√Ω v√† l·ªçc salary (lo·∫°i b·ªè outliers ·∫£o)
    if 'salary_avg_million_vnd' in df.columns:
        # Convert to numeric v√† lo·∫°i b·ªè values ·∫£o
        df['salary_avg_million_vnd'] = pd.to_numeric(df['salary_avg_million_vnd'], errors='coerce').fillna(0)
        
        # Ch·ªâ gi·ªØ l·∫°i l∆∞∆°ng t·ª´ 0-200 tri·ªáu VNƒê (th·ª±c t·∫ø)
        df = df[df['salary_avg_million_vnd'] <= 200].copy()
        
        # Lo·∫°i b·ªè nh·ªØng record c√≥ l∆∞∆°ng √¢m ho·∫∑c b·∫±ng 0 trong analysis
        df.loc[df['salary_avg_million_vnd'] < 0, 'salary_avg_million_vnd'] = 0
        
        # T·∫°o salary ranges th·ª±c t·∫ø
        df['salary_range'] = pd.cut(
            df['salary_avg_million_vnd'], 
            bins=[0, 8, 15, 25, 40, 200], 
            labels=['< 8M', '8-15M', '15-25M', '25-40M', '40M+']
        )
    
    # X·ª≠ l√Ω city
    if 'location' in df.columns:
        def get_city(location):
            if pd.isna(location):
                return 'Kh√°c'
            location = str(location)
            if 'H√† N·ªôi' in location:
                return 'H√† N·ªôi'
            elif 'H·ªì Ch√≠ Minh' in location or 'TPHCM' in location:
                return 'TP.HCM'
            elif 'ƒê√† N·∫µng' in location:
                return 'ƒê√† N·∫µng'
            elif 'C·∫ßn Th∆°' in location:
                return 'C·∫ßn Th∆°'
            else:
                return 'Kh√°c'
        
        df['city'] = df['location'].apply(get_city)
    
    # X·ª≠ l√Ω experience
    def get_experience_level(exp_text):
        if pd.isna(exp_text):
            return 'Kh√¥ng y√™u c·∫ßu'
        
        exp_text = str(exp_text).lower()
        if 'kh√¥ng y√™u c·∫ßu' in exp_text or 'intern' in exp_text:
            return 'Kh√¥ng y√™u c·∫ßu'
        elif any(x in exp_text for x in ['1 nƒÉm', '2 nƒÉm', '1-2', 'junior']):
            return 'Junior (1-2 nƒÉm)'
        elif any(x in exp_text for x in ['3 nƒÉm', '4 nƒÉm', '5 nƒÉm', '3-5', 'middle']):
            return 'Middle (3-5 nƒÉm)'
        elif any(x in exp_text for x in ['senior', '6 nƒÉm', '7 nƒÉm', '8 nƒÉm', '5+']):
            return 'Senior (5+ nƒÉm)'
        else:
            return 'Kh√°c'
    
    if 'experience_years' in df.columns:
        df['experience_level'] = df['experience_years'].apply(get_experience_level)
    
    # Extract numeric experience (gi·ªõi h·∫°n 0-20 nƒÉm)
    def get_exp_numeric(exp_text):
        if pd.isna(exp_text):
            return 0
        exp_text = str(exp_text).lower()
        if 'kh√¥ng y√™u c·∫ßu' in exp_text:
            return 0
        numbers = re.findall(r'\d+', exp_text)
        if numbers:
            exp_years = int(numbers[0])
            # Gi·ªõi h·∫°n kinh nghi·ªám 0-20 nƒÉm
            return min(exp_years, 20)
        return 1
    
    if 'experience_years' in df.columns:
        df['exp_numeric'] = df['experience_years'].apply(get_exp_numeric)
    
    return df

def create_metric_card(title, value, color_class="blue"):
    return f"""
    <div class="metric-card {color_class}">
        <p class="metric-value">{value}</p>
        <p class="metric-label">{title}</p>
    </div>
    """

def show_overview_page(df, db):
    st.markdown("## T·ªïng quan th·ªã tr∆∞·ªùng vi·ªác l√†m")
    
    # Filters - hi·ªÉn th·ªã th·∫≥ng
    st.markdown("### B·ªô l·ªçc d·ªØ li·ªáu")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        collections = ["T·∫•t c·∫£"] + db.list_collection_names()
        selected_collection = st.selectbox("Ch·ªçn lƒ©nh v·ª±c:", collections, key="overview_collection")
    
    with col2:
        if 'city' in df.columns:
            cities = ['T·∫•t c·∫£'] + sorted(df['city'].unique().tolist())
            selected_city = st.selectbox("Th√†nh ph·ªë:", cities, key="overview_city")
    
    with col3:
        if 'salary_avg_million_vnd' in df.columns:
            salary_range = st.slider(
                "Kho·∫£ng l∆∞∆°ng (tri·ªáu VNƒê):",
                min_value=0,
                max_value=200,
                value=(0, 200),
                step=5,
                key="overview_salary"
            )
    
    st.markdown("---")  # NgƒÉn c√°ch gi·ªØa filters v√† charts
    
    # Apply filters
    if 'selected_collection' in locals() and selected_collection != 'T·∫•t c·∫£':
        df = load_data(selected_collection)
        df = process_data(df)
    
    if 'selected_city' in locals() and selected_city != 'T·∫•t c·∫£':
        df = df[df['city'] == selected_city]
    
    if 'salary_range' in locals():
        df = df[
            (df['salary_avg_million_vnd'] >= salary_range[0]) & 
            (df['salary_avg_million_vnd'] <= salary_range[1])
        ]
    
    # Metrics row
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.markdown(create_metric_card(
            "T·ªïng s·ªë vi·ªác l√†m", 
            f"{len(df):,}", 
            "blue"
        ), unsafe_allow_html=True)
    
    with col2:
        companies = df['company'].nunique() if 'company' in df.columns else 0
        st.markdown(create_metric_card(
            "S·ªë c√¥ng ty", 
            f"{companies:,}", 
            "green"
        ), unsafe_allow_html=True)
    
    with col3:
        avg_salary = df['salary_avg_million_vnd'].mean() if 'salary_avg_million_vnd' in df.columns else 0
        st.markdown(create_metric_card(
            "L∆∞∆°ng TB", 
            f"{avg_salary:.1f}M", 
            "purple"
        ), unsafe_allow_html=True)
    
    with col4:
        categories = df['category'].nunique() if 'category' in df.columns else 0
        st.markdown(create_metric_card(
            "Lƒ©nh v·ª±c", 
            f"{categories}", 
            "orange"
        ), unsafe_allow_html=True)
    
    # Key insights
    st.markdown("### Th√¥ng tin t·ªïng quan")
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### Ph√¢n b·ªë theo lƒ©nh v·ª±c")
        if 'category' in df.columns:
            category_counts = df['category'].value_counts()
            fig = px.pie(
                values=category_counts.values,
                names=category_counts.index,
                color_discrete_sequence=px.colors.qualitative.Set3
            )
            fig.update_layout(height=400)
            st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        st.markdown("#### Ph√¢n b·ªë theo ƒë·ªãa ƒëi·ªÉm")
        if 'city' in df.columns:
            city_counts = df['city'].value_counts().head(8)
            fig = px.bar(
                x=city_counts.values,
                y=city_counts.index,
                orientation='h',
                color_discrete_sequence=['#3b82f6']
            )
            fig.update_layout(
                xaxis_title="S·ªë l∆∞·ª£ng job",
                yaxis_title="Th√†nh ph·ªë",
                height=400,
                yaxis={'categoryorder': 'total ascending'}
            )
            st.plotly_chart(fig, use_container_width=True)
    
    # Summary stats v·ªõi styling ƒë·∫πp
    st.markdown("### üìà Th·ªëng k√™ n·ªïi b·∫≠t")
    
    # T·∫°o 4 c·ªôt ƒë·ªÉ hi·ªÉn th·ªã c√°c th·ªëng k√™ quan tr·ªçng
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        if 'salary_avg_million_vnd' in df.columns:
            salary_data = df[df['salary_avg_million_vnd'] > 0]
            if not salary_data.empty:
                max_salary = salary_data['salary_avg_million_vnd'].max()
                st.markdown(f"""
                <div style="
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    padding: 1.5rem;
                    border-radius: 15px;
                    color: white;
                    text-align: center;
                    box-shadow: 0 8px 32px rgba(31, 38, 135, 0.37);
                    margin-bottom: 1rem;
                ">
                    <h3 style="margin: 0; font-size: 2.5rem; font-weight: bold;">{max_salary:.1f}M</h3>
                    <p style="margin: 0.5rem 0 0 0; font-size: 1rem; opacity: 0.9;">L∆∞∆°ng cao nh·∫•t</p>
                    <p style="margin: 0; font-size: 0.8rem; opacity: 0.7;">VNƒê/th√°ng</p>
                </div>
                """, unsafe_allow_html=True)
    
    with col2:
        if 'company' in df.columns and len(df) > 0:
            top_company = df['company'].value_counts()
            if not top_company.empty:
                company_name = top_company.index[0]
                top_count = top_company.iloc[0]
                # R√∫t g·ªçn t√™n c√¥ng ty n·∫øu qu√° d√†i
                display_name = company_name[:15] + "..." if len(company_name) > 15 else company_name
                st.markdown(f"""
                <div style="
                    background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);
                    padding: 1.5rem;
                    border-radius: 15px;
                    color: white;
                    text-align: center;
                    box-shadow: 0 8px 32px rgba(31, 38, 135, 0.37);
                    margin-bottom: 1rem;
                ">
                    <h3 style="margin: 0; font-size: 2.5rem; font-weight: bold;">{top_count}</h3>
                    <p style="margin: 0.5rem 0 0 0; font-size: 1rem; opacity: 0.9;">jobs t·ª´</p>
                    <p style="margin: 0; font-size: 0.8rem; opacity: 0.7; font-weight: 600;">{display_name}</p>
                </div>
                """, unsafe_allow_html=True)
    
    with col3:
        if 'category' in df.columns and len(df) > 0:
            top_category = df['category'].value_counts()
            if not top_category.empty:
                category_name = top_category.index[0]
                top_cat_count = top_category.iloc[0]
                percentage = (top_cat_count / len(df)) * 100
                st.markdown(f"""
                <div style="
                    background: linear-gradient(135deg, #fc466b 0%, #3f5efb 100%);
                    padding: 1.5rem;
                    border-radius: 15px;
                    color: white;
                    text-align: center;
                    box-shadow: 0 8px 32px rgba(31, 38, 135, 0.37);
                    margin-bottom: 1rem;
                ">
                    <h3 style="margin: 0; font-size: 2.5rem; font-weight: bold;">{top_cat_count}</h3>
                    <p style="margin: 0.5rem 0 0 0; font-size: 1rem; opacity: 0.9;">{category_name}</p>
                    <p style="margin: 0; font-size: 0.8rem; opacity: 0.7;">{percentage:.1f}% t·ªïng jobs</p>
                </div>
                """, unsafe_allow_html=True)
    
    with col4:
        if 'city' in df.columns and len(df) > 0:
            city_data = df['city'].value_counts()
            if not city_data.empty:
                top_city = city_data.index[0]
                city_count = city_data.iloc[0]
                city_percentage = (city_count / len(df)) * 100
                st.markdown(f"""
                <div style="
                    background: linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%);
                    padding: 1.5rem;
                    border-radius: 15px;
                    color: #8b4513;
                    text-align: center;
                    box-shadow: 0 8px 32px rgba(31, 38, 135, 0.37);
                    margin-bottom: 1rem;
                ">
                    <h3 style="margin: 0; font-size: 2.5rem; font-weight: bold; color: #8b4513;">{city_count}</h3>
                    <p style="margin: 0.5rem 0 0 0; font-size: 1rem; opacity: 0.9;">jobs t·∫°i {top_city}</p>
                    <p style="margin: 0; font-size: 0.8rem; opacity: 0.7;">{city_percentage:.1f}% th·ªã tr∆∞·ªùng</p>
                </div>
                """, unsafe_allow_html=True)
    
    # Th√™m insights row
    st.markdown("### üí° Insights th√∫ v·ªã")
    insight_col1, insight_col2, insight_col3 = st.columns(3)
    
    with insight_col1:
        if 'salary_avg_million_vnd' in df.columns:
            salary_data = df[df['salary_avg_million_vnd'] > 0]
            if not salary_data.empty:
                median_salary = salary_data['salary_avg_million_vnd'].median()
                avg_salary = salary_data['salary_avg_million_vnd'].mean()
                st.info(f"üí∞ **L∆∞∆°ng trung v·ªã**: {median_salary:.1f}M VNƒê\n\nüìä **L∆∞∆°ng trung b√¨nh**: {avg_salary:.1f}M VNƒê")
    
    with insight_col2:
        if 'experience_years' in df.columns:
            # Ph√¢n t√≠ch kinh nghi·ªám
            exp_data = df[df['experience_years'].notna()]
            if not exp_data.empty:
                no_exp_count = len(exp_data[exp_data['experience_years'].str.contains('kh√¥ng y√™u c·∫ßu|intern', case=False, na=False)])
                exp_percentage = (no_exp_count / len(exp_data)) * 100
                st.success(f"üéØ **C∆° h·ªôi cho fresher**: {exp_percentage:.1f}%\n\nüìù {no_exp_count} jobs kh√¥ng y√™u c·∫ßu kinh nghi·ªám")
    
    with insight_col3:
        if 'update_date' in df.columns:
            recent_data = df[df['update_date'].notna()]
            if not recent_data.empty:
                latest_date = recent_data['update_date'].max()
                days_ago = (datetime.now() - latest_date).days
                st.warning(f"üïê **D·ªØ li·ªáu m·ªõi nh·∫•t**: {days_ago} ng√†y tr∆∞·ªõc\n\nüìÖ C·∫≠p nh·∫≠t: {latest_date.strftime('%d/%m/%Y')}")

def show_analysis_page(df, db):
    st.markdown("## Ph√¢n t√≠ch chi ti·∫øt")
    
    # Filters - hi·ªÉn th·ªã th·∫≥ng  
    st.markdown("### B·ªô l·ªçc d·ªØ li·ªáu")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        collections = ["T·∫•t c·∫£"] + db.list_collection_names()
        selected_collection = st.selectbox("Ch·ªçn lƒ©nh v·ª±c:", collections, key="analysis_collection")
    
    with col2:
        if 'city' in df.columns:
            cities = ['T·∫•t c·∫£'] + sorted(df['city'].unique().tolist())
            selected_city = st.selectbox("Th√†nh ph·ªë:", cities, key="analysis_city")
    
    with col3:
        if 'salary_avg_million_vnd' in df.columns:
            salary_range = st.slider(
                "Kho·∫£ng l∆∞∆°ng (tri·ªáu VNƒê):",
                min_value=0,
                max_value=200,
                value=(0, 200),
                step=5,
                key="analysis_salary"
            )
    
    st.markdown("---")  # NgƒÉn c√°ch gi·ªØa filters v√† charts
    
    # Apply filters
    if 'selected_collection' in locals() and selected_collection != 'T·∫•t c·∫£':
        df = load_data(selected_collection)
        df = process_data(df)
    
    if 'selected_city' in locals() and selected_city != 'T·∫•t c·∫£':
        df = df[df['city'] == selected_city]
    
    if 'salary_range' in locals():
        df = df[
            (df['salary_avg_million_vnd'] >= salary_range[0]) & 
            (df['salary_avg_million_vnd'] <= salary_range[1])
        ]
    
    # Row 1: Salary Analysis
    st.markdown("### Ph√¢n t√≠ch m·ª©c l∆∞∆°ng")
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### Histogram - Ph√¢n ph·ªëi l∆∞∆°ng")
        if 'salary_avg_million_vnd' in df.columns:
            salary_data = df[df['salary_avg_million_vnd'] > 0]
            if not salary_data.empty:
                fig = px.histogram(
                    salary_data,
                    x='salary_avg_million_vnd',
                    nbins=20,
                    color_discrete_sequence=['#3b82f6']
                )
                fig.update_layout(
                    xaxis_title="L∆∞∆°ng (tri·ªáu VNƒê)",
                    yaxis_title="S·ªë l∆∞·ª£ng job",
                    showlegend=False,
                    height=400
                )
                st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        st.markdown("#### Boxplot - So s√°nh theo lƒ©nh v·ª±c")
        if 'category' in df.columns and 'salary_avg_million_vnd' in df.columns:
            salary_data = df[df['salary_avg_million_vnd'] > 0]
            if not salary_data.empty:
                fig = px.box(
                    salary_data,
                    x='category',
                    y='salary_avg_million_vnd',
                    color_discrete_sequence=['#10b981']
                )
                fig.update_layout(
                    xaxis_title="",
                    yaxis_title="L∆∞∆°ng (tri·ªáu VNƒê)",
                    height=400
                )
                fig.update_xaxes(tickangle=45)
                st.plotly_chart(fig, use_container_width=True)
    
    # Row 2: Location Analysis
    st.markdown("### Ph√¢n t√≠ch ƒë·ªãa ƒëi·ªÉm")
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### M·ª©c l∆∞∆°ng trung b√¨nh theo th√†nh ph·ªë")
        if 'city' in df.columns and 'salary_avg_million_vnd' in df.columns:
            salary_by_city = df[df['salary_avg_million_vnd'] > 0].groupby('city')['salary_avg_million_vnd'].mean().sort_values(ascending=True)
            if not salary_by_city.empty:
                fig = px.bar(
                    x=salary_by_city.values,
                    y=salary_by_city.index,
                    orientation='h',
                    color_discrete_sequence=['#f59e0b']
                )
                fig.update_layout(
                    xaxis_title="L∆∞∆°ng trung b√¨nh (tri·ªáu VNƒê)",
                    yaxis_title="Th√†nh ph·ªë",
                    height=400
                )
                st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        st.markdown("#### Xu h∆∞·ªõng vi·ªác l√†m theo th·ªùi gian")
        if 'update_date' in df.columns:
            df_time = df.dropna(subset=['update_date'])
            if not df_time.empty:
                df_time['week'] = df_time['update_date'].dt.to_period('W').dt.start_time
                weekly_jobs = df_time.groupby('week').size().reset_index(name='count')
                
                fig = px.line(
                    weekly_jobs,
                    x='week',
                    y='count',
                    markers=True,
                    color_discrete_sequence=['#3b82f6']
                )
                fig.update_layout(
                    xaxis_title="Tu·∫ßn",
                    yaxis_title="S·ªë l∆∞·ª£ng job",
                    height=400
                )
                st.plotly_chart(fig, use_container_width=True)
    
    # Row 3: Experience & Skills
    st.markdown("### Ph√¢n t√≠ch kinh nghi·ªám & k·ªπ nƒÉng")
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### M·ªëi quan h·ªá Kinh nghi·ªám - L∆∞∆°ng")
        if all(col in df.columns for col in ['exp_numeric', 'salary_avg_million_vnd', 'city']):
            scatter_data = df[(df['salary_avg_million_vnd'] > 0) & (df['exp_numeric'] >= 0)]
            if not scatter_data.empty:
                try:
                    fig = px.scatter(
                        scatter_data,
                        x='exp_numeric',
                        y='salary_avg_million_vnd',
                        color='city',
                        size='salary_avg_million_vnd',
                        trendline="ols",
                        hover_data=['title', 'company']
                    )
                except ImportError:
                    fig = px.scatter(
                        scatter_data,
                        x='exp_numeric',
                        y='salary_avg_million_vnd',
                        color='city',
                        size='salary_avg_million_vnd',
                        hover_data=['title', 'company']
                    )
                
                fig.update_layout(
                    xaxis_title="Kinh nghi·ªám (nƒÉm)",
                    yaxis_title="L∆∞∆°ng (tri·ªáu VNƒê)",
                    height=400
                )
                st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        st.markdown("#### Top 15 k·ªπ nƒÉng ƒë∆∞·ª£c y√™u c·∫ßu")
        if 'skills' in df.columns:
            all_skills = []
            for skills_list in df['skills'].dropna():
                if isinstance(skills_list, list):
                    all_skills.extend(skills_list)
                elif isinstance(skills_list, str):
                    all_skills.append(skills_list)
            
            if all_skills:
                skills_freq = {}
                for skill in all_skills:
                    skills_freq[skill] = skills_freq.get(skill, 0) + 1
                
                top_skills = sorted(skills_freq.items(), key=lambda x: x[1], reverse=True)[:15]
                skills_df = pd.DataFrame(top_skills, columns=['skill', 'count'])
                
                fig = px.bar(
                    skills_df,
                    x='count',
                    y='skill',
                    orientation='h',
                    color_discrete_sequence=['#06b6d4']
                )
                fig.update_layout(
                    xaxis_title="S·ªë l∆∞·ª£ng job y√™u c·∫ßu",
                    yaxis_title="",
                    height=400,
                    yaxis={'categoryorder': 'total ascending'}
                )
                st.plotly_chart(fig, use_container_width=True)

def show_storytelling_page(df, db):
    st.markdown("## üìñ C√¢u chuy·ªán th·ªã tr∆∞·ªùng IT Vi·ªát Nam")
    
    # Quick stats overview
    total_jobs = len(df)
    companies = df['company'].nunique() if 'company' in df.columns else 0
    avg_salary = df['salary_avg_million_vnd'].mean() if 'salary_avg_million_vnd' in df.columns else 0
    categories = df['category'].nunique() if 'category' in df.columns else 0
    
    # Opening story
    st.markdown("""
    <div style="
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 3rem;
        border-radius: 20px;
        text-align: center;
        margin: 2rem 0;
        box-shadow: 0 10px 30px rgba(0,0,0,0.2);
    ">
        <h1 style="color: white; margin-bottom: 1rem; font-size: 2.5rem;">üåü Kh√°m ph√° th·ªã tr∆∞·ªùng IT Vi·ªát Nam</h1>
        <p style="font-size: 1.3rem; margin: 0; opacity: 0.9;">
            M·ªôt h√†nh tr√¨nh qua nh·ªØng con s·ªë v√† insight th√∫ v·ªã t·ª´ h√†ng ngh√¨n c∆° h·ªôi vi·ªác l√†m
        </p>
    </div>
    """, unsafe_allow_html=True)
    
    # Key numbers section
    st.markdown("### üìä B·ª©c tranh t·ªïng quan")
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.markdown(f"""
        <div style="background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%); 
                    color: white; padding: 2rem; border-radius: 15px; text-align: center; 
                    box-shadow: 0 8px 25px rgba(59, 130, 246, 0.3);">
            <h2 style="color: white; margin: 0; font-size: 2.5rem;">{total_jobs:,}</h2>
            <p style="margin: 0.5rem 0 0 0; opacity: 0.9;">C∆° h·ªôi vi·ªác l√†m</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown(f"""
        <div style="background: linear-gradient(135deg, #10b981 0%, #059669 100%); 
                    color: white; padding: 2rem; border-radius: 15px; text-align: center;
                    box-shadow: 0 8px 25px rgba(16, 185, 129, 0.3);">
            <h2 style="color: white; margin: 0; font-size: 2.5rem;">{companies:,}</h2>
            <p style="margin: 0.5rem 0 0 0; opacity: 0.9;">C√¥ng ty tuy·ªÉn d·ª•ng</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown(f"""
        <div style="background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%); 
                    color: white; padding: 2rem; border-radius: 15px; text-align: center;
                    box-shadow: 0 8px 25px rgba(245, 158, 11, 0.3);">
            <h2 style="color: white; margin: 0; font-size: 2.5rem;">{avg_salary:.1f}M</h2>
            <p style="margin: 0.5rem 0 0 0; opacity: 0.9;">L∆∞∆°ng trung b√¨nh</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col4:
        st.markdown(f"""
        <div style="background: linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%); 
                    color: white; padding: 2rem; border-radius: 15px; text-align: center;
                    box-shadow: 0 8px 25px rgba(139, 92, 246, 0.3);">
            <h2 style="color: white; margin: 0; font-size: 2.5rem;">{categories}</h2>
            <p style="margin: 0.5rem 0 0 0; opacity: 0.9;">Lƒ©nh v·ª±c IT</p>
        </div>
        """, unsafe_allow_html=True)
    
    # Story chapters
    st.markdown("---")
    
    # Chapter 1: Geography
    st.markdown("### üó∫Ô∏è Ch∆∞∆°ng 1: B·∫£n ƒë·ªì c∆° h·ªôi")
    
    if 'city' in df.columns:
        city_counts = df['city'].value_counts()
        top_city = city_counts.index[0]
        top_city_percent = (city_counts.iloc[0] / len(df)) * 100
        
        col1, col2 = st.columns([2, 1])
        with col1:
            fig = px.pie(
                values=city_counts.values[:5],
                names=city_counts.index[:5],
                title="Ph√¢n b·ªë vi·ªác l√†m IT theo th√†nh ph·ªë",
                color_discrete_sequence=px.colors.qualitative.Set3
            )
            fig.update_layout(height=400)
            st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            st.markdown(f"""
            <div style="background: #f0f9ff; border-left: 5px solid #3b82f6; 
                        padding: 2rem; border-radius: 10px; height: 300px; 
                        display: flex; flex-direction: column; justify-content: center;">
                <h4 style="color: #1e40af; margin-bottom: 1rem;">üí° Insight</h4>
                <p style="font-size: 1.1rem; line-height: 1.6; margin: 0;">
                    <strong>{top_city}</strong> chi·∫øm <strong>{top_city_percent:.1f}%</strong> th·ªã tr∆∞·ªùng,
                    cho th·∫•y s·ª± t·∫≠p trung m·∫°nh m·∫Ω c·ªßa ng√†nh IT t·∫°i c√°c ƒë√¥ th·ªã l·ªõn.
                </p>
            </div>
            """, unsafe_allow_html=True)
    
    # Chapter 2: Salary story
    st.markdown("### üí∞ Ch∆∞∆°ng 2: Cu·ªôc ƒëua l∆∞∆°ng b·ªïng")
    
    if 'salary_avg_million_vnd' in df.columns:
        salary_data = df[df['salary_avg_million_vnd'] > 0]
        if not salary_data.empty:
            median_salary = salary_data['salary_avg_million_vnd'].median()
            high_salary_count = len(salary_data[salary_data['salary_avg_million_vnd'] >= 40])
            high_salary_percent = (high_salary_count / len(salary_data)) * 100
            
            col1, col2 = st.columns([2, 1])
            with col1:
                fig = px.histogram(
                    salary_data,
                    x='salary_avg_million_vnd',
                    nbins=25,
                    title="Ph√¢n ph·ªëi m·ª©c l∆∞∆°ng trong ng√†nh IT",
                    color_discrete_sequence=['#3b82f6']
                )
                fig.update_layout(
                    xaxis_title="M·ª©c l∆∞∆°ng (tri·ªáu VNƒê/th√°ng)",
                    yaxis_title="S·ªë l∆∞·ª£ng v·ªã tr√≠",
                    height=400
                )
                st.plotly_chart(fig, use_container_width=True)
            
            with col2:
                st.markdown(f"""
                <div style="background: #f0fdf4; border-left: 5px solid #10b981; 
                            padding: 2rem; border-radius: 10px; height: 300px; 
                            display: flex; flex-direction: column; justify-content: center;">
                    <h4 style="color: #059669; margin-bottom: 1rem;">üí∞ L∆∞∆°ng b·ªïng</h4>
                    <p style="margin-bottom: 1rem;"><strong>L∆∞∆°ng trung v·ªã:</strong> {median_salary:.1f}M VNƒê</p>
                    <p style="margin: 0;"><strong>L∆∞∆°ng cao (‚â•40M):</strong> {high_salary_percent:.1f}% v·ªã tr√≠</p>
                    <p style="font-size: 0.9rem; color: #6b7280; margin-top: 1rem;">
                        C∆° h·ªôi thu nh·∫≠p cao v·∫´n c√≤n h·∫°n ch·∫ø nh∆∞ng ƒë√°ng k·ª≥ v·ªçng.
                    </p>
                </div>
                """, unsafe_allow_html=True)
    
    # Chapter 3: Experience journey
    st.markdown("### üéØ Ch∆∞∆°ng 3: H√†nh tr√¨nh t·ª´ Fresher ƒë·∫øn Senior")
    
    if 'experience_years' in df.columns:
        fresher_data = df[df['experience_years'].str.contains('kh√¥ng y√™u c·∫ßu|intern', case=False, na=False)]
        fresher_count = len(fresher_data)
        fresher_percent = (fresher_count / len(df)) * 100
        
        # Experience vs Salary scatter
        if 'exp_numeric' in df.columns:
            scatter_data = df[(df['salary_avg_million_vnd'] > 0) & (df['exp_numeric'] >= 0)]
            if not scatter_data.empty:
                col1, col2 = st.columns([2, 1])
                with col1:
                    fig = px.scatter(
                        scatter_data,
                        x='exp_numeric',
                        y='salary_avg_million_vnd',
                        color='city' if 'city' in df.columns else None,
                        size='salary_avg_million_vnd',
                        title="M·ªëi quan h·ªá Kinh nghi·ªám - M·ª©c l∆∞∆°ng",
                        hover_data=['title', 'company'] if all(col in df.columns for col in ['title', 'company']) else None
                    )
                    fig.update_layout(
                        xaxis_title="S·ªë nƒÉm kinh nghi·ªám",
                        yaxis_title="M·ª©c l∆∞∆°ng (tri·ªáu VNƒê)",
                        height=400
                    )
                    st.plotly_chart(fig, use_container_width=True)
                
                with col2:
                    st.markdown(f"""
                    <div style="background: #fef3c7; border-left: 5px solid #f59e0b; 
                                padding: 2rem; border-radius: 10px; height: 300px; 
                                display: flex; flex-direction: column; justify-content: center;">
                        <h4 style="color: #d97706; margin-bottom: 1rem;">üå± C∆° h·ªôi Fresher</h4>
                        <p style="font-size: 1.2rem; margin-bottom: 1rem;">
                            <strong>{fresher_percent:.1f}%</strong> v·ªã tr√≠ kh√¥ng y√™u c·∫ßu kinh nghi·ªám
                        </p>
                        <p style="margin: 0; color: #92400e;">
                            {fresher_count:,} c∆° h·ªôi cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu s·ª± nghi·ªáp IT
                        </p>
                    </div>
                    """, unsafe_allow_html=True)
    
    # Chapter 4: Skills that matter
    st.markdown("### üöÄ Ch∆∞∆°ng 4: K·ªπ nƒÉng v√†ng")
    
    if 'skills' in df.columns:
        all_skills = []
        for skills_list in df['skills'].dropna():
            if isinstance(skills_list, list):
                all_skills.extend(skills_list)
            elif isinstance(skills_list, str):
                all_skills.append(skills_list)
        
        if all_skills:
            skills_freq = {}
            for skill in all_skills:
                skills_freq[skill] = skills_freq.get(skill, 0) + 1
            
            top_skills = sorted(skills_freq.items(), key=lambda x: x[1], reverse=True)[:10]
            skills_df = pd.DataFrame(top_skills, columns=['K·ªπ nƒÉng', 'S·ªë l∆∞·ª£ng job'])
            
            col1, col2 = st.columns([2, 1])
            with col1:
                fig = px.bar(
                    skills_df,
                    x='S·ªë l∆∞·ª£ng job',
                    y='K·ªπ nƒÉng',
                    orientation='h',
                    title="Top 10 k·ªπ nƒÉng ƒë∆∞·ª£c sƒÉn ƒë√≥n",
                    color_discrete_sequence=['#06b6d4']
                )
                fig.update_layout(
                    height=400,
                    yaxis={'categoryorder': 'total ascending'}
                )
                st.plotly_chart(fig, use_container_width=True)
            
            with col2:
                top_skill = top_skills[0][0]
                top_skill_count = top_skills[0][1]
                st.markdown(f"""
                <div style="background: #ecfdf5; border-left: 5px solid #06b6d4; 
                            padding: 2rem; border-radius: 10px; height: 300px; 
                            display: flex; flex-direction: column; justify-content: center;">
                    <h4 style="color: #0891b2; margin-bottom: 1rem;">üéØ K·ªπ nƒÉng #1</h4>
                    <p style="font-size: 1.3rem; margin-bottom: 1rem; font-weight: bold; color: #0891b2;">
                        {top_skill}
                    </p>
                    <p style="margin: 0;">
                        ƒê∆∞·ª£c y√™u c·∫ßu trong <strong>{top_skill_count}</strong> v·ªã tr√≠ vi·ªác l√†m
                    </p>
                </div>
                """, unsafe_allow_html=True)
    
    # Final thoughts
    st.markdown("---")
    st.markdown("### üéØ K·∫øt lu·∫≠n v√† h√†nh ƒë·ªông")
    
    st.markdown("""
    <div style="background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%); 
                color: white; padding: 3rem; border-radius: 20px; text-align: center; margin: 2rem 0;">
        <h3 style="color: white; margin-bottom: 1.5rem;">üí° Key Takeaways</h3>
        <div style="text-align: left; max-width: 800px; margin: 0 auto;">
            <p><strong>‚úÖ Th·ªã tr∆∞·ªùng ƒëang ph√°t tri·ªÉn m·∫°nh</strong> v·ªõi h√†ng ngh√¨n c∆° h·ªôi ƒëa d·∫°ng</p>
            <p><strong>‚úÖ C∆° h·ªôi cho m·ªçi level</strong> t·ª´ fresher ƒë·∫øn senior</p>
            <p><strong>‚úÖ M·ª©c l∆∞∆°ng c·∫°nh tranh</strong> v√† c√≥ ti·ªÅm nƒÉng tƒÉng theo kinh nghi·ªám</p>
            <p><strong>‚úÖ K·ªπ nƒÉng l√† ch√¨a kh√≥a</strong> th√†nh c√¥ng trong ng√†nh</p>
            <p><strong>‚úÖ T·∫≠p trung ƒë·ªãa l√Ω</strong> t·∫°i c√°c th√†nh ph·ªë l·ªõn</p>
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    # Action items
    st.markdown("""
    <div style="background: #1f2937; color: white; padding: 2rem; border-radius: 15px; margin: 2rem 0;">
        <h4 style="color: #60a5fa; margin-bottom: 1rem;">üöÄ H√†nh ƒë·ªông ngay h√¥m nay:</h4>
        <ol style="padding-left: 1.5rem; line-height: 1.8;">
            <li>X√°c ƒë·ªãnh k·ªπ nƒÉng ph√π h·ª£p v·ªõi xu h∆∞·ªõng th·ªã tr∆∞·ªùng</li>
            <li>X√¢y d·ª±ng portfolio m·∫°nh v·ªõi c√°c project th·ª±c t·∫ø</li>
            <li>Networking v√† k·∫øt n·ªëi v·ªõi c·ªông ƒë·ªìng IT</li>
            <li>C·∫≠p nh·∫≠t ki·∫øn th·ª©c th∆∞·ªùng xuy√™n theo c√¥ng ngh·ªá m·ªõi</li>
            <li>Chu·∫©n b·ªã s·∫µn s√†ng cho nh·ªØng c∆° h·ªôi tuy·ªát v·ªùi!</li>
        </ol>
    </div>
    """, unsafe_allow_html=True)

def show_advanced_page(df, db):
    
    # Filters - hi·ªÉn th·ªã th·∫≥ng
    st.markdown("### B·ªô l·ªçc d·ªØ li·ªáu")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        collections = ["T·∫•t c·∫£"] + db.list_collection_names()
        selected_collection = st.selectbox("Ch·ªçn lƒ©nh v·ª±c:", collections, key="advanced_collection")
    
    with col2:
        if 'city' in df.columns:
            cities = ['T·∫•t c·∫£'] + sorted(df['city'].unique().tolist())
            selected_city = st.selectbox("Th√†nh ph·ªë:", cities, key="advanced_city")
    
    with col3:
        if 'salary_avg_million_vnd' in df.columns:
            salary_range = st.slider(
                "Kho·∫£ng l∆∞∆°ng (tri·ªáu VNƒê):",
                min_value=0,
                max_value=200,
                value=(0, 200),
                step=5,
                key="advanced_salary"
            )
    
    st.markdown("---")  # NgƒÉn c√°ch gi·ªØa filters v√† charts
    
    # Apply filters
    if 'selected_collection' in locals() and selected_collection != 'T·∫•t c·∫£':
        df = load_data(selected_collection)
        df = process_data(df)
    
    if 'selected_city' in locals() and selected_city != 'T·∫•t c·∫£':
        df = df[df['city'] == selected_city]
    
    if 'salary_range' in locals():
        df = df[
            (df['salary_avg_million_vnd'] >= salary_range[0]) & 
            (df['salary_avg_million_vnd'] <= salary_range[1])
        ]
    
    # Row 1: Companies & Advanced Analysis
    st.markdown("### Ph√¢n t√≠ch c√¥ng ty & t∆∞∆°ng quan")
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### Top 15 c√¥ng ty tuy·ªÉn d·ª•ng")
        if 'company' in df.columns:
            top_companies = df['company'].value_counts().head(15)
            fig = px.bar(
                x=top_companies.values,
                y=top_companies.index,
                orientation='h',
                color_discrete_sequence=['#84cc16']
            )
            fig.update_layout(
                xaxis_title="S·ªë l∆∞·ª£ng job",
                yaxis_title="",
                height=400,
                yaxis={'categoryorder': 'total ascending'}
            )
            st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        st.markdown("#### Ma tr·∫≠n t∆∞∆°ng quan")
        numeric_data = {}
        if 'salary_avg_million_vnd' in df.columns:
            numeric_data['L∆∞∆°ng'] = df['salary_avg_million_vnd']
        if 'exp_numeric' in df.columns:
            numeric_data['Kinh nghi·ªám'] = df['exp_numeric']
        
        if len(numeric_data) >= 2:
            le = LabelEncoder()
            if 'category' in df.columns:
                numeric_data['Lƒ©nh v·ª±c'] = le.fit_transform(df['category'].fillna('Unknown'))
            if 'city' in df.columns:
                numeric_data['Th√†nh ph·ªë'] = le.fit_transform(df['city'].fillna('Unknown'))
            
            corr_df = pd.DataFrame(numeric_data)
            corr_matrix = corr_df.corr()
            
            fig = px.imshow(
                corr_matrix,
                text_auto=True,
                aspect="auto",
                color_continuous_scale="RdBu_r",
                zmin=-1, zmax=1
            )
            fig.update_layout(height=400)
            st.plotly_chart(fig, use_container_width=True)
    
    # Row 2: Treemap & Violin Plot
    st.markdown("### Ph√¢n t√≠ch ph√¢n b·ªë ƒëa chi·ªÅu")
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### Treemap - Ph√¢n b·ªë ƒëa chi·ªÅu")
        if 'category' in df.columns and 'city' in df.columns:
            treemap_data = df.groupby(['category', 'city']).agg({
                'salary_avg_million_vnd': 'mean',
                'title': 'count'
            }).reset_index()
            treemap_data.columns = ['category', 'city', 'avg_salary', 'job_count']
            treemap_data = treemap_data[treemap_data['job_count'] > 0]
            
            if not treemap_data.empty:
                fig = px.treemap(
                    treemap_data,
                    path=[px.Constant("Vi·ªác l√†m IT"), 'category', 'city'],
                    values='job_count',
                    color='avg_salary',
                    color_continuous_scale='Viridis'
                )
                fig.update_layout(height=400)
                st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        st.markdown("#### Violin Plot - Ph√¢n ph·ªëi l∆∞∆°ng chi ti·∫øt")
        if 'category' in df.columns and 'salary_avg_million_vnd' in df.columns:
            salary_data = df[df['salary_avg_million_vnd'] > 0]
            if not salary_data.empty:
                fig = px.violin(
                    salary_data,
                    x='category',
                    y='salary_avg_million_vnd',
                    box=True,
                    color_discrete_sequence=['#8b5cf6']
                )
                fig.update_layout(
                    xaxis_title="Lƒ©nh v·ª±c",
                    yaxis_title="L∆∞∆°ng (tri·ªáu VNƒê)",
                    height=400
                )
                fig.update_xaxes(tickangle=45)
                st.plotly_chart(fig, use_container_width=True)

def main():
    # Header nghi√™m t√∫c
    st.markdown("""
    <div style="text-align: center; margin-bottom: 2rem;">
        <h1>Job Data Analytics Dashboard</h1>
        <p style="font-size: 1.2rem; color: #6b7280;">Ph√¢n t√≠ch xu h∆∞·ªõng vi·ªác l√†m IT t·∫°i Vi·ªát Nam</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Sidebar ch·ªâ c√≥ navigation
    st.sidebar.title("TopCV")
    
    # Initialize session state
    if 'current_page' not in st.session_state:
        st.session_state.current_page = 'Overview'
    
    # Simple navigation without complex state handling
    pages = ["Overview", "Analysis", "Advanced", "Story"]
    page_labels = ["T·ªïng quan", "Ph√¢n t√≠ch", "N√¢ng cao", "Storytelling"]
    
    selected_page = st.sidebar.radio(
        "",
        pages,
        format_func=lambda x: page_labels[pages.index(x)],
        key="main_navigation"
    )
    
    # Update session state immediately
    st.session_state.current_page = selected_page
    
    # Load database connection
    db = init_connection()
    if db is None:
        st.error("Kh√¥ng th·ªÉ k·∫øt n·ªëi database. Vui l√≤ng ki·ªÉm tra MongoDB.")
        return
    
    # Load initial data
    with st.spinner("ƒêang t·∫£i d·ªØ li·ªáu..."):
        df = load_data()
        
    if df.empty:
        st.error("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã!")
        return
    
    df = process_data(df)
    
    # Show selected page based on current selection
    if selected_page == "Overview":
        show_overview_page(df, db)
    elif selected_page == "Analysis":
        show_analysis_page(df, db)
    elif selected_page == "Advanced":
        show_advanced_page(df, db)
    elif selected_page == "Story":
        show_storytelling_page(df, db)

if __name__ == "__main__":
    main()