import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import numpy as np
from pymongo import MongoClient
import re
from sklearn.preprocessing import LabelEncoder
from datetime import datetime, timedelta
import warnings
warnings.filterwarnings('ignore')

# Page config
st.set_page_config(
    page_title="C√¢u chuy·ªán th·ªã tr∆∞·ªùng IT Vi·ªát Nam",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# CSS cho storytelling page
st.markdown("""
<style>
    /* Main layout */
    .main {
        padding-top: 2rem;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
    }
    
    /* Story container */
    .story-container {
        background: white;
        border-radius: 20px;
        padding: 3rem;
        margin: 2rem auto;
        max-width: 1200px;
        box-shadow: 0 20px 40px rgba(0,0,0,0.1);
    }
    
    /* Title styling */
    .story-title {
        font-size: 3.5rem;
        font-weight: 800;
        text-align: center;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        margin-bottom: 1rem;
    }
    
    .story-subtitle {
        font-size: 1.3rem;
        text-align: center;
        color: #6b7280;
        margin-bottom: 3rem;
        font-style: italic;
    }
    
    /* Chapter styling */
    .chapter {
        margin: 4rem 0;
        padding: 2rem;
        border-left: 5px solid #3b82f6;
        background: #f8fafc;
        border-radius: 10px;
    }
    
    .chapter-title {
        font-size: 2.2rem;
        font-weight: 700;
        color: #1e293b;
        margin-bottom: 1rem;
    }
    
    .chapter-number {
        font-size: 1rem;
        color: #3b82f6;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 1px;
        margin-bottom: 0.5rem;
    }
    
    /* Insight boxes */
    .insight-box {
        background: linear-gradient(135deg, #eff6ff 0%, #dbeafe 100%);
        border: 2px solid #3b82f6;
        border-radius: 15px;
        padding: 2rem;
        margin: 2rem 0;
        box-shadow: 0 8px 25px rgba(59, 130, 246, 0.15);
    }
    
    .insight-title {
        font-size: 1.5rem;
        font-weight: 700;
        color: #1e40af;
        margin-bottom: 1rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }
    
    .insight-content {
        font-size: 1.1rem;
        color: #1e293b;
        line-height: 1.7;
    }
    
    /* Highlight numbers */
    .highlight-number {
        font-size: 2.5rem;
        font-weight: 800;
        color: #3b82f6;
        display: inline-block;
        margin: 0 0.5rem;
    }
    
    /* Quote styling */
    .quote {
        background: #f1f5f9;
        border-left: 5px solid #f59e0b;
        padding: 2rem;
        margin: 2rem 0;
        border-radius: 10px;
        font-style: italic;
        font-size: 1.2rem;
        color: #374151;
    }
    
    /* Stats grid */
    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 2rem;
        margin: 2rem 0;
    }
    
    .stat-card {
        background: white;
        padding: 2rem;
        border-radius: 15px;
        text-align: center;
        box-shadow: 0 8px 30px rgba(0,0,0,0.1);
        border: 1px solid #e5e7eb;
        transition: transform 0.3s ease;
    }
    
    .stat-card:hover {
        transform: translateY(-5px);
    }
    
    .stat-value {
        font-size: 3rem;
        font-weight: 800;
        color: #3b82f6;
        margin-bottom: 0.5rem;
    }
    
    .stat-label {
        font-size: 1.1rem;
        color: #6b7280;
        font-weight: 500;
    }
    
    /* Call to action */
    .cta-section {
        background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
        color: white;
        padding: 3rem;
        border-radius: 20px;
        text-align: center;
        margin: 4rem 0;
    }
    
    .cta-title {
        font-size: 2.5rem;
        font-weight: 700;
        margin-bottom: 1rem;
    }
    
    .cta-text {
        font-size: 1.3rem;
        margin-bottom: 2rem;
        opacity: 0.9;
    }
    
    /* Hide Streamlit elements */
    .stApp > header {
        background: transparent;
    }
    
    .stApp {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }
    
    /* Timeline */
    .timeline-item {
        background: white;
        border-radius: 10px;
        padding: 1.5rem;
        margin: 1rem 0;
        border-left: 4px solid #3b82f6;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    }
    
    .timeline-title {
        font-weight: 700;
        color: #1e293b;
        margin-bottom: 0.5rem;
    }
    
    .timeline-content {
        color: #4b5563;
        line-height: 1.6;
    }
</style>
""", unsafe_allow_html=True)

# Database connection functions
@st.cache_resource
def init_connection():
    try:
        client = MongoClient("mongodb://root:123456@localhost:27017/")
        db = client.job_data
        db.list_collection_names()
        return db
    except Exception as e:
        st.error(f"‚ùå L·ªói k·∫øt n·ªëi database: {e}")
        return None

@st.cache_data(ttl=300)
def load_data():
    db = init_connection()
    if db is None:
        return pd.DataFrame()
    
    try:
        all_data = []
        collections = db.list_collection_names()
        for coll_name in collections:
            collection = db[coll_name]
            data = list(collection.find({}))
            for doc in data:
                if 'category' not in doc:
                    doc['category'] = coll_name
            all_data.extend(data)
        
        if not all_data:
            return pd.DataFrame()
        
        df = pd.DataFrame(all_data)
        if '_id' in df.columns:
            df = df.drop('_id', axis=1)
        
        return df
    except Exception as e:
        st.error(f"‚ùå L·ªói t·∫£i d·ªØ li·ªáu: {e}")
        return pd.DataFrame()

def process_data(df):
    if df.empty:
        return df
    
    # Process salary
    if 'salary_avg_million_vnd' in df.columns:
        df['salary_avg_million_vnd'] = pd.to_numeric(df['salary_avg_million_vnd'], errors='coerce').fillna(0)
        df = df[df['salary_avg_million_vnd'] <= 200].copy()
        df.loc[df['salary_avg_million_vnd'] < 0, 'salary_avg_million_vnd'] = 0
    
    # Process city
    if 'location' in df.columns:
        def get_city(location):
            if pd.isna(location):
                return 'Kh√°c'
            location = str(location)
            if 'H√† N·ªôi' in location:
                return 'H√† N·ªôi'
            elif 'H·ªì Ch√≠ Minh' in location or 'TPHCM' in location:
                return 'TP.HCM'
            elif 'ƒê√† N·∫µng' in location:
                return 'ƒê√† N·∫µng'
            elif 'C·∫ßn Th∆°' in location:
                return 'C·∫ßn Th∆°'
            else:
                return 'Kh√°c'
        
        df['city'] = df['location'].apply(get_city)
    
    # Process experience
    def get_exp_numeric(exp_text):
        if pd.isna(exp_text):
            return 0
        exp_text = str(exp_text).lower()
        if 'kh√¥ng y√™u c·∫ßu' in exp_text:
            return 0
        numbers = re.findall(r'\d+', exp_text)
        if numbers:
            exp_years = int(numbers[0])
            return min(exp_years, 20)
        return 1
    
    if 'experience_years' in df.columns:
        df['exp_numeric'] = df['experience_years'].apply(get_exp_numeric)
    
    return df

def main():
    # Load and process data
    df = load_data()
    if df.empty:
        st.error("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã!")
        return
    
    df = process_data(df)
    
    # Main story container
    st.markdown('<div class="story-container">', unsafe_allow_html=True)
    
    # Title section
    st.markdown("""
    <div class="story-title">C√¢u chuy·ªán th·ªã tr∆∞·ªùng IT Vi·ªát Nam 2025</div>
    <div class="story-subtitle">H√†nh tr√¨nh kh√°m ph√° s√¢u s·∫Øc v·ªÅ c∆° h·ªôi, th√°ch th·ª©c v√† t∆∞∆°ng lai c·ªßa ng√†nh c√¥ng ngh·ªá</div>
    """, unsafe_allow_html=True)
    
    # Executive Summary
    st.markdown("""
    <div style="background: linear-gradient(135deg, #1e3a8a 0%, #3b82f6 100%); 
                color: white; padding: 3rem; border-radius: 20px; margin: 2rem 0; 
                box-shadow: 0 15px 35px rgba(30, 58, 138, 0.3);">
        <h2 style="color: white; margin-bottom: 2rem; text-align: center; font-size: 2rem;">üìã T√≥m t·∫Øt ƒëi·ªÅu h√†nh</h2>
        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 2rem; text-align: left;">
            <div>
                <h4 style="color: #93c5fd; margin-bottom: 1rem;">üéØ M·ª•c ti√™u nghi√™n c·ª©u</h4>
                <p style="line-height: 1.8; margin: 0;">Ph√¢n t√≠ch to√†n di·ªán th·ªã tr∆∞·ªùng vi·ªác l√†m IT t·∫°i Vi·ªát Nam, 
                t·ª´ ƒë√≥ ƒë∆∞a ra nh·ªØng nh·∫≠n ƒë·ªãnh chi·∫øn l∆∞·ª£c v·ªÅ xu h∆∞·ªõng tuy·ªÉn d·ª•ng, m·ª©c l∆∞∆°ng, 
                k·ªπ nƒÉng ƒë∆∞·ª£c sƒÉn ƒë√≥n v√† c∆° h·ªôi ph√°t tri·ªÉn ngh·ªÅ nghi·ªáp.</p>
            </div>
            <div>
                <h4 style="color: #93c5fd; margin-bottom: 1rem;">üìä Ph·∫°m vi d·ªØ li·ªáu</h4>
                <p style="line-height: 1.8; margin: 0;">Nghi√™n c·ª©u d·ª±a tr√™n d·ªØ li·ªáu th·ª±c t·∫ø t·ª´ c√°c 
                n·ªÅn t·∫£ng tuy·ªÉn d·ª•ng h√†ng ƒë·∫ßu, bao g·ªìm th√¥ng tin v·ªÅ v·ªã tr√≠, l∆∞∆°ng b·ªïng, ƒë·ªãa ƒëi·ªÉm, 
                kinh nghi·ªám y√™u c·∫ßu v√† k·ªπ nƒÉng c·∫ßn thi·∫øt.</p>
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    # Introduction
    st.markdown("""
    <div class="quote">
    "Trong b·ªëi c·∫£nh chuy·ªÉn ƒë·ªïi s·ªë m·∫°nh m·∫Ω v√† s·ª± b√πng n·ªï c·ªßa tr√≠ tu·ªá nh√¢n t·∫°o, 
    th·ªã tr∆∞·ªùng IT Vi·ªát Nam ƒëang ch·ª©ng ki·∫øn nh·ªØng thay ƒë·ªïi cƒÉn b·∫£n v·ªÅ c√°ch th·ª©c tuy·ªÉn d·ª•ng, 
    y√™u c·∫ßu k·ªπ nƒÉng v√† c∆° h·ªôi ngh·ªÅ nghi·ªáp. ƒê√¢y kh√¥ng ch·ªâ l√† cu·ªôc c√°ch m·∫°ng c√¥ng ngh·ªá, 
    m√† c√≤n l√† cu·ªôc c√°ch m·∫°ng nh√¢n t√†i - n∆°i m√† nh·ªØng con s·ªë k·ªÉ l√™n c√¢u chuy·ªán ƒë·∫ßy th√∫ v·ªã 
    v·ªÅ hi·ªán t·∫°i v√† t∆∞∆°ng lai c·ªßa ng√†nh c√¥ng ngh·ªá th√¥ng tin."
    </div>
    """, unsafe_allow_html=True)
    
    # Market Context
    st.markdown("""
    <div style="background: #f8fafc; border: 2px solid #e2e8f0; border-radius: 15px; 
                padding: 2rem; margin: 2rem 0;">
        <h3 style="color: #1e293b; margin-bottom: 1.5rem;">üåç B·ªëi c·∫£nh th·ªã tr∆∞·ªùng</h3>
        <div style="display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 1.5rem;">
            <div style="text-align: center;">
                <div style="font-size: 2rem; margin-bottom: 0.5rem;">üöÄ</div>
                <h4 style="color: #3b82f6; margin-bottom: 0.5rem;">Chuy·ªÉn ƒë·ªïi s·ªë</h4>
                <p style="font-size: 0.9rem; color: #64748b; margin: 0;">
                    C√°c doanh nghi·ªáp tƒÉng c∆∞·ªùng ƒë·∫ßu t∆∞ c√¥ng ngh·ªá
                </p>
            </div>
            <div style="text-align: center;">
                <div style="font-size: 2rem; margin-bottom: 0.5rem;">ü§ñ</div>
                <h4 style="color: #3b82f6; margin-bottom: 0.5rem;">AI Revolution</h4>
                <p style="font-size: 0.9rem; color: #64748b; margin: 0;">
                    Tr√≠ tu·ªá nh√¢n t·∫°o thay ƒë·ªïi landscape c√¥ng ngh·ªá
                </p>
            </div>
            <div style="text-align: center;">
                <div style="font-size: 2rem; margin-bottom: 0.5rem;">üåê</div>
                <h4 style="color: #3b82f6; margin-bottom: 0.5rem;">Remote Work</h4>
                <p style="font-size: 0.9rem; color: #64748b; margin: 0;">
                    L√†m vi·ªác t·ª´ xa tr·ªü th√†nh xu h∆∞·ªõng ch·ªß ƒë·∫°o
                </p>
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    # Chapter 1: B·ª©c tranh t·ªïng quan
    st.markdown("""
    <div class="chapter">
        <div class="chapter-number">Ch∆∞∆°ng 1</div>
        <div class="chapter-title">üåü Panorama th·ªã tr∆∞·ªùng IT Vi·ªát Nam</div>
    </div>
    """, unsafe_allow_html=True)
    
    # Market size analysis
    st.markdown("""
    <div style="background: linear-gradient(135deg, #ecfeff 0%, #cffafe 100%); 
                border-left: 5px solid #06b6d4; padding: 2rem; border-radius: 15px; margin: 2rem 0;">
        <h4 style="color: #0891b2; margin-bottom: 1rem;">üìà Quy m√¥ th·ªã tr∆∞·ªùng</h4>
        <p style="font-size: 1.1rem; line-height: 1.8; margin: 0; color: #164e63;">
            Th·ªã tr∆∞·ªùng IT Vi·ªát Nam ƒëang trong giai ƒëo·∫°n tƒÉng tr∆∞·ªüng m·∫°nh m·∫Ω, ƒë∆∞·ª£c th√∫c ƒë·∫©y b·ªüi 
            ch√≠nh s√°ch s·ªë h√≥a qu·ªëc gia v√† nhu c·∫ßu chuy·ªÉn ƒë·ªïi s·ªë c·ªßa doanh nghi·ªáp. 
            Vi·ªát Nam ƒë√£ tr·ªü th√†nh m·ªôt trong nh·ªØng ƒëi·ªÉm ƒë·∫øn h·∫•p d·∫´n cho ƒë·∫ßu t∆∞ c√¥ng ngh·ªá 
            v√† ph√°t tri·ªÉn nh√¢n l·ª±c IT ch·∫•t l∆∞·ª£ng cao trong khu v·ª±c ƒê√¥ng Nam √Å.
        </p>
    </div>
    """, unsafe_allow_html=True)
    
    # Statistics overview
    total_jobs = len(df)
    companies = df['company'].nunique() if 'company' in df.columns else 0
    avg_salary = df['salary_avg_million_vnd'].mean() if 'salary_avg_million_vnd' in df.columns else 0
    categories = df['category'].nunique() if 'category' in df.columns else 0
    
    # Stats grid
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.markdown(f"""
        <div class="stat-card">
            <div class="stat-value">{total_jobs:,}</div>
            <div class="stat-label">C∆° h·ªôi vi·ªác l√†m</div>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown(f"""
        <div class="stat-card">
            <div class="stat-value">{companies:,}</div>
            <div class="stat-label">C√¥ng ty tuy·ªÉn d·ª•ng</div>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown(f"""
        <div class="stat-card">
            <div class="stat-value">{avg_salary:.1f}M</div>
            <div class="stat-label">L∆∞∆°ng trung b√¨nh</div>
        </div>
        """, unsafe_allow_html=True)
    
    with col4:
        st.markdown(f"""
        <div class="stat-card">
            <div class="stat-value">{categories}</div>
            <div class="stat-label">Lƒ©nh v·ª±c IT</div>
        </div>
        """, unsafe_allow_html=True)
    
    # Insight box 1
    st.markdown(f"""
    <div class="insight-box">
        <div class="insight-title">üîç Ph√¢n t√≠ch s√¢u v·ªÅ quy m√¥ th·ªã tr∆∞·ªùng</div>
        <div class="insight-content">
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 2rem; margin-bottom: 1.5rem;">
                <div>
                    <h5 style="color: #1e40af; margin-bottom: 0.5rem;">M·∫≠t ƒë·ªô c∆° h·ªôi</h5>
                    <p style="margin: 0;">V·ªõi <span class="highlight-number">{total_jobs:,}</span> v·ªã tr√≠ vi·ªác l√†m 
                    t·ª´ <span class="highlight-number">{companies:,}</span> c√¥ng ty, t·ª∑ l·ªá job/c√¥ng ty 
                    ƒë·∫°t <strong>{(total_jobs/companies if companies > 0 else 0):.1f}</strong> - 
                    cho th·∫•y m·ªói c√¥ng ty trung b√¨nh tuy·ªÉn d·ª•ng nhi·ªÅu v·ªã tr√≠ IT.</p>
                </div>
                <div>
                    <h5 style="color: #1e40af; margin-bottom: 0.5rem;">ƒêa d·∫°ng lƒ©nh v·ª±c</h5>
                    <p style="margin: 0;">Th·ªã tr∆∞·ªùng ph·ªß s√≥ng <span class="highlight-number">{categories}</span> 
                    lƒ©nh v·ª±c IT kh√°c nhau, t·ª´ ph√°t tri·ªÉn ph·∫ßn m·ªÅm truy·ªÅn th·ªëng ƒë·∫øn c√°c c√¥ng ngh·ªá 
                    m·ªõi n·ªïi nh∆∞ AI/ML, Blockchain, v√† IoT.</p>
                </div>
            </div>
            <div style="background: #eff6ff; padding: 1.5rem; border-radius: 10px; border-left: 4px solid #3b82f6;">
                <h5 style="color: #1e40af; margin-bottom: 0.5rem;">üí° Insight ch√≠nh</h5>
                <p style="margin: 0;">S·ª± ƒëa d·∫°ng n√†y kh√¥ng ch·ªâ ph·∫£n √°nh t√≠nh nƒÉng ƒë·ªông c·ªßa th·ªã tr∆∞·ªùng 
                m√† c√≤n t·∫°o ra nhi·ªÅu c∆° h·ªôi cho c√°c chuy√™n gia IT ·ªü m·ªçi c·∫•p ƒë·ªô v√† chuy√™n m√¥n kh√°c nhau. 
                T·ª´ c√°c startup c√¥ng ngh·ªá ƒë·∫øn c√°c t·∫≠p ƒëo√†n ƒëa qu·ªëc gia, m·ªçi lo·∫°i h√¨nh doanh nghi·ªáp 
                ƒë·ªÅu ƒëang t√≠ch c·ª±c tuy·ªÉn d·ª•ng nh√¢n t√†i IT.</p>
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    # Market trends analysis
    st.markdown("""
    <div style="margin: 3rem 0;">
        <h4 style="color: #1e293b; margin-bottom: 2rem; text-align: center;">üìä Xu h∆∞·ªõng th·ªã tr∆∞·ªùng theo th·ªùi gian</h4>
    </div>
    """, unsafe_allow_html=True)
    
    # Time-based analysis if data available
    if 'update_date' in df.columns:
        df_time = df.dropna(subset=['update_date'])
        if not df_time.empty:
            # Monthly trend
            df_time['month'] = df_time['update_date'].dt.to_period('M')
            monthly_jobs = df_time.groupby('month').size().reset_index(name='job_count')
            monthly_jobs['month_str'] = monthly_jobs['month'].astype(str)
            
            fig = go.Figure()
            fig.add_trace(go.Scatter(
                x=monthly_jobs['month_str'], 
                y=monthly_jobs['job_count'],
                mode='lines+markers',
                name='S·ªë l∆∞·ª£ng job',
                line=dict(color='#3b82f6', width=3),
                marker=dict(size=8, color='#1d4ed8')
            ))
            
            fig.update_layout(
                title="Xu h∆∞·ªõng ƒëƒÉng tuy·ªÉn vi·ªác l√†m IT theo th√°ng",
                xaxis_title="Th√°ng",
                yaxis_title="S·ªë l∆∞·ª£ng job",
                height=400,
                template="plotly_white"
            )
            
            st.plotly_chart(fig, use_container_width=True)
            
            # Growth analysis
            if len(monthly_jobs) > 1:
                latest_month = monthly_jobs.iloc[-1]['job_count']
                previous_month = monthly_jobs.iloc[-2]['job_count'] if len(monthly_jobs) > 1 else latest_month
                growth_rate = ((latest_month - previous_month) / previous_month * 100) if previous_month > 0 else 0
                
                st.markdown(f"""
                <div style="background: {'#dcfce7' if growth_rate > 0 else '#fef2f2'}; 
                            border-left: 5px solid {'#16a34a' if growth_rate > 0 else '#dc2626'}; 
                            padding: 1.5rem; border-radius: 10px; margin: 1rem 0;">
                    <h5 style="color: {'#15803d' if growth_rate > 0 else '#dc2626'}; margin-bottom: 0.5rem;">
                        {'üìà' if growth_rate > 0 else 'üìâ'} TƒÉng tr∆∞·ªüng th√°ng g·∫ßn nh·∫•t
                    </h5>
                    <p style="margin: 0; font-size: 1.1rem;">
                        Th·ªã tr∆∞·ªùng {' tƒÉng tr∆∞·ªüng' if growth_rate > 0 else 'gi·∫£m'} 
                        <strong>{abs(growth_rate):.1f}%</strong> so v·ªõi th√°ng tr∆∞·ªõc, 
                        cho th·∫•y {'s·ª± nƒÉng ƒë·ªông v√† ti·ªÅm nƒÉng ph√°t tri·ªÉn m·∫°nh m·∫Ω' if growth_rate > 0 else 's·ª± ƒëi·ªÅu ch·ªânh t·ª± nhi√™n c·ªßa th·ªã tr∆∞·ªùng'}.
                    </p>
                </div>
                """, unsafe_allow_html=True)
    
    # Chapter 2: Ph√¢n t√≠ch ƒë·ªãa l√Ω
    st.markdown("""
    <div class="chapter">
        <div class="chapter-number">Ch∆∞∆°ng 2</div>
        <div class="chapter-title">üó∫Ô∏è B·∫£n ƒë·ªì c∆° h·ªôi: ƒê·ªãa l√Ω kinh t·∫ø IT</div>
    </div>
    """, unsafe_allow_html=True)
    
    # Geographic introduction
    st.markdown("""
    <div style="background: linear-gradient(135deg, #fef3c7 0%, #fde68a 100%); 
                border-left: 5px solid #f59e0b; padding: 2rem; border-radius: 15px; margin: 2rem 0;">
        <h4 style="color: #92400e; margin-bottom: 1rem;">üåè Ph√¢n b·ªë ƒë·ªãa l√Ω v√† √Ω nghƒ©a kinh t·∫ø</h4>
        <p style="font-size: 1.1rem; line-height: 1.8; margin: 0; color: #78350f;">
            Vi·ªác ph√¢n t√≠ch ph√¢n b·ªë ƒë·ªãa l√Ω c·ªßa c√°c c∆° h·ªôi vi·ªác l√†m IT kh√¥ng ch·ªâ cho th·∫•y n∆°i t·∫≠p trung 
            c√°c ho·∫°t ƒë·ªông c√¥ng ngh·ªá, m√† c√≤n ph·∫£n √°nh chi·∫øn l∆∞·ª£c ph√°t tri·ªÉn kinh t·∫ø s·ªë c·ªßa t·ª´ng v√πng mi·ªÅn. 
            S·ª± b·∫•t c√¢n x·ª©ng trong ph√¢n b·ªë n√†y c≈©ng m·ªü ra nh·ªØng c∆° h·ªôi ƒë·∫ßu t∆∞ v√† ph√°t tri·ªÉn ti·ªÅm nƒÉng.
        </p>
    </div>
    """, unsafe_allow_html=True)
    
    # City analysis
    if 'city' in df.columns:
        city_counts = df['city'].value_counts()
        
        # Detailed city analysis
        col1, col2 = st.columns([2, 1])
        
        with col1:
            # Enhanced pie chart
            fig = px.pie(
                values=city_counts.values,
                names=city_counts.index,
                title="Ph√¢n b·ªë c∆° h·ªôi vi·ªác l√†m IT theo th√†nh ph·ªë",
                color_discrete_sequence=px.colors.qualitative.Set3,
                hole=0.4
            )
            fig.update_traces(
                textposition='inside', 
                textinfo='percent+label',
                hovertemplate='<b>%{label}</b><br>S·ªë job: %{value}<br>T·ª∑ l·ªá: %{percent}<extra></extra>'
            )
            fig.update_layout(
                height=500, 
                font_size=12,
                annotations=[dict(text='IT Jobs<br>Distribution', x=0.5, y=0.5, font_size=14, showarrow=False)]
            )
            st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            # City rankings and analysis
            st.markdown("""
            <div style="background: white; border: 2px solid #e5e7eb; border-radius: 15px; 
                        padding: 1.5rem; height: 450px; overflow-y: auto;">
                <h4 style="color: #374151; margin-bottom: 1rem; text-align: center;">üèÜ B·∫£ng x·∫øp h·∫°ng th√†nh ph·ªë</h4>
            """, unsafe_allow_html=True)
            
            for idx, (city, count) in enumerate(city_counts.head(8).items()):
                percentage = (count / len(df)) * 100
                rank_color = ["#3b82f6", "#10b981", "#f59e0b", "#ef4444"][idx] if idx < 4 else "#6b7280"
                st.markdown(f"""
                <div style="display: flex; align-items: center; padding: 0.75rem; 
                            border-bottom: 1px solid #f3f4f6; background: {'#f8fafc' if idx % 2 == 0 else 'white'};">
                    <div style="background: {rank_color}; color: white; width: 30px; height: 30px; 
                                border-radius: 50%; display: flex; align-items: center; 
                                justify-content: center; font-weight: bold; margin-right: 1rem;">
                        {idx + 1}
                    </div>
                    <div style="flex: 1;">
                        <div style="font-weight: 600; color: #1f2937;">{city}</div>
                        <div style="color: #6b7280; font-size: 0.9rem;">
                            {count:,} jobs ({percentage:.1f}%)
                        </div>
                    </div>
                </div>
                """, unsafe_allow_html=True)
            
            st.markdown("</div>", unsafe_allow_html=True)
        
        # Geographic insights
        top_city = city_counts.index[0]
        top_city_count = city_counts.iloc[0]
        top_city_percent = (top_city_count / len(df)) * 100
        
        # Top 3 cities analysis
        top_3_cities = city_counts.head(3)
        top_3_total = top_3_cities.sum()
        top_3_percent = (top_3_total / len(df)) * 100
        
        st.markdown(f"""
        <div class="insight-box">
            <div class="insight-title">üìç Ph√¢n t√≠ch ƒë·ªãa l√Ω chi ti·∫øt</div>
            <div class="insight-content">
                <div style="display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 2rem; margin-bottom: 2rem;">
                    <div style="text-align: center; padding: 1.5rem; background: #eff6ff; border-radius: 10px;">
                        <h3 style="color: #1e40af; margin: 0; font-size: 2rem;">{top_city_percent:.1f}%</h3>
                        <p style="margin: 0.5rem 0 0 0; font-weight: 600; color: #3730a3;">Th·ªëng tr·ªã c·ªßa {top_city}</p>
                    </div>
                    <div style="text-align: center; padding: 1.5rem; background: #f0fdf4; border-radius: 10px;">
                        <h3 style="color: #166534; margin: 0; font-size: 2rem;">{top_3_percent:.1f}%</h3>
                        <p style="margin: 0.5rem 0 0 0; font-weight: 600; color: #15803d;">Top 3 th√†nh ph·ªë</p>
                    </div>
                    <div style="text-align: center; padding: 1.5rem; background: #fef2f2; border-radius: 10px;">
                        <h3 style="color: #dc2626; margin: 0; font-size: 2rem;">{len(city_counts)}</h3>
                        <p style="margin: 0.5rem 0 0 0; font-weight: 600; color: #b91c1c;">Th√†nh ph·ªë c√≥ c∆° h·ªôi</p>
                    </div>
                </div>
                
                <div style="background: #f8fafc; padding: 2rem; border-radius: 10px; border-left: 4px solid #3b82f6;">
                    <h5 style="color: #1e40af; margin-bottom: 1rem;">üéØ Insight v·ªÅ t·∫≠p trung ƒë·ªãa l√Ω</h5>
                    <p style="margin-bottom: 1rem;"><strong>Hi·ªán t∆∞·ª£ng t·∫≠p trung:</strong> 
                    {top_3_percent:.1f}% c∆° h·ªôi vi·ªác l√†m IT t·∫≠p trung t·∫°i 3 th√†nh ph·ªë l·ªõn nh·∫•t, 
                    cho th·∫•y s·ª± t·∫≠p trung m·∫°nh m·∫Ω c·ªßa c√°c ho·∫°t ƒë·ªông c√¥ng ngh·ªá.</p>
                    
                    <p style="margin-bottom: 1rem;"><strong>Nguy√™n nh√¢n:</strong> 
                    H·∫° t·∫ßng c√¥ng ngh·ªá ph√°t tri·ªÉn, h·ªá sinh th√°i startup s√¥i ƒë·ªông, 
                    v√† s·ª± hi·ªán di·ªán c·ªßa c√°c c√¥ng ty c√¥ng ngh·ªá l·ªõn.</p>
                    
                    <p style="margin: 0;"><strong>C∆° h·ªôi:</strong> 
                    C√°c th√†nh ph·ªë nh·ªè h∆°n ƒëang d·∫ßn n·ªïi l√™n v·ªõi chi ph√≠ s·ªëng th·∫•p h∆°n 
                    v√† ch√≠nh s√°ch ∆∞u ƒë√£i h·∫•p d·∫´n cho c√°c c√¥ng ty c√¥ng ngh·ªá.</p>
                </div>
            </div>
        </div>
        """, unsafe_allow_html=True)
        
        # Salary comparison by city
        if 'salary_avg_million_vnd' in df.columns:
            salary_by_city = df[df['salary_avg_million_vnd'] > 0].groupby('city').agg({
                'salary_avg_million_vnd': ['mean', 'median', 'count']
            }).round(1)
            salary_by_city.columns = ['avg_salary', 'median_salary', 'job_count']
            salary_by_city = salary_by_city.sort_values('avg_salary', ascending=False).reset_index()
            
            st.markdown("### üí∞ So s√°nh m·ª©c l∆∞∆°ng theo ƒë·ªãa ƒëi·ªÉm")
            
            fig = go.Figure()
            
            # Add average salary bars
            fig.add_trace(go.Bar(
                name='L∆∞∆°ng trung b√¨nh',
                x=salary_by_city['city'][:8],
                y=salary_by_city['avg_salary'][:8],
                marker_color='#3b82f6',
                yaxis='y',
                offsetgroup=1
            ))
            
            # Add median salary bars
            fig.add_trace(go.Bar(
                name='L∆∞∆°ng trung v·ªã',
                x=salary_by_city['city'][:8],
                y=salary_by_city['median_salary'][:8],
                marker_color='#10b981',
                yaxis='y',
                offsetgroup=2
            ))
            
            fig.update_layout(
                title='So s√°nh m·ª©c l∆∞∆°ng trung b√¨nh v√† trung v·ªã theo th√†nh ph·ªë',
                xaxis_title='Th√†nh ph·ªë',
                yaxis_title='M·ª©c l∆∞∆°ng (tri·ªáu VNƒê/th√°ng)',
                barmode='group',
                height=500,
                template='plotly_white'
            )
            
            st.plotly_chart(fig, use_container_width=True)
            
            # Salary-geography analysis
            highest_salary_city = salary_by_city.iloc[0]['city']
            highest_avg_salary = salary_by_city.iloc[0]['avg_salary']
            
            st.markdown(f"""
            <div style="background: #ecfdf5; border-left: 5px solid #10b981; 
                        padding: 2rem; border-radius: 10px; margin: 2rem 0;">
                <h4 style="color: #059669; margin-bottom: 1rem;">üíé Th√†nh ph·ªë c√≥ m·ª©c l∆∞∆°ng cao nh·∫•t</h4>
                <p style="font-size: 1.2rem; margin-bottom: 1rem;">
                    <strong>{highest_salary_city}</strong> d·∫´n ƒë·∫ßu v·ªõi m·ª©c l∆∞∆°ng trung b√¨nh 
                    <span style="color: #059669; font-weight: bold; font-size: 1.3rem;">{highest_avg_salary:.1f}M VNƒê</span>
                </p>
                <p style="margin: 0; color: #065f46;">
                    ƒêi·ªÅu n√†y ph·∫£n √°nh chi ph√≠ s·ªëng cao h∆°n nh∆∞ng c≈©ng cho th·∫•y s·ª± c·∫°nh tranh 
                    gay g·∫Øt v·ªÅ nh√¢n t√†i v√† m·ª©c ƒë·ªô ph√°t tri·ªÉn c·ªßa ng√†nh c√¥ng ngh·ªá t·∫°i ƒë√¢y.
                </p>
            </div>
            """, unsafe_allow_html=True)    # Chapter 3: Cu·ªôc chi·∫øn l∆∞∆°ng b·ªïng
    st.markdown("""
    <div class="chapter">
        <div class="chapter-number">Ch∆∞∆°ng 3</div>
        <div class="chapter-title">üí∞ Anatomy c·ªßa thang l∆∞∆°ng IT: T·ª´ Entry-level ƒë·∫øn C-suite</div>
    </div>
    """, unsafe_allow_html=True)
    
    # Salary introduction
    st.markdown("""
    <div style="background: linear-gradient(135deg, #f0f9ff 0%, #e0f2fe 100%); 
                border-left: 5px solid #0ea5e9; padding: 2rem; border-radius: 15px; margin: 2rem 0;">
        <h4 style="color: #0369a1; margin-bottom: 1rem;">üí° T·∫°i sao ph√¢n t√≠ch l∆∞∆°ng l·∫°i quan tr·ªçng?</h4>
        <p style="font-size: 1.1rem; line-height: 1.8; margin-bottom: 1rem; color: #164e63;">
            M·ª©c l∆∞∆°ng kh√¥ng ch·ªâ ph·∫£n √°nh gi√° tr·ªã c·ªßa m·ªôt v·ªã tr√≠ m√† c√≤n cho th·∫•y s·ª©c kh·ªèe c·ªßa to√†n b·ªô 
            h·ªá sinh th√°i c√¥ng ngh·ªá. N√≥ ·∫£nh h∆∞·ªüng ƒë·∫øn quy·∫øt ƒë·ªãnh ngh·ªÅ nghi·ªáp, xu h∆∞·ªõng di chuy·ªÉn nh√¢n t√†i, 
            v√† s·ª± c·∫°nh tranh gi·ªØa c√°c c√¥ng ty.
        </p>
        <div style="background: #bae6fd; padding: 1rem; border-radius: 8px;">
            <p style="margin: 0; font-style: italic; color: #075985;">
                "L∆∞∆°ng b·ªïng trong IT kh√¥ng ch·ªâ l√† con s·ªë, m√† l√† c√¢u chuy·ªán v·ªÅ innovation, 
                scarcity c·ªßa talent, v√† future value c·ªßa c√¥ng ngh·ªá."
            </p>
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    # Salary analysis
    if 'salary_avg_million_vnd' in df.columns:
        salary_data = df[df['salary_avg_million_vnd'] > 0]
        if not salary_data.empty:
            # Advanced salary statistics
            salary_stats = {
                'mean': salary_data['salary_avg_million_vnd'].mean(),
                'median': salary_data['salary_avg_million_vnd'].median(),
                'std': salary_data['salary_avg_million_vnd'].std(),
                'min': salary_data['salary_avg_million_vnd'].min(),
                'max': salary_data['salary_avg_million_vnd'].max(),
                'q25': salary_data['salary_avg_million_vnd'].quantile(0.25),
                'q75': salary_data['salary_avg_million_vnd'].quantile(0.75)
            }
            
            # Salary distribution with multiple views
            col1, col2 = st.columns(2)
            
            with col1:
                # Enhanced histogram
                fig = px.histogram(
                    salary_data,
                    x='salary_avg_million_vnd',
                    nbins=30,
                    title="Ph√¢n ph·ªëi m·ª©c l∆∞∆°ng chi ti·∫øt",
                    color_discrete_sequence=['#3b82f6'],
                    opacity=0.7
                )
                
                # Add statistical lines
                fig.add_vline(x=salary_stats['median'], line_dash="dash", 
                             line_color="red", annotation_text=f"Trung v·ªã: {salary_stats['median']:.1f}M")
                fig.add_vline(x=salary_stats['mean'], line_dash="dash", 
                             line_color="green", annotation_text=f"Trung b√¨nh: {salary_stats['mean']:.1f}M")
                
                fig.update_layout(
                    xaxis_title="M·ª©c l∆∞∆°ng (tri·ªáu VNƒê/th√°ng)",
                    yaxis_title="S·ªë l∆∞·ª£ng v·ªã tr√≠",
                    height=450,
                    showlegend=False
                )
                st.plotly_chart(fig, use_container_width=True)
            
            with col2:
                # Box plot for quartile analysis
                fig = go.Figure()
                fig.add_trace(go.Box(
                    y=salary_data['salary_avg_million_vnd'],
                    name='Ph√¢n ph·ªëi l∆∞∆°ng',
                    boxpoints='outliers',
                    marker_color='#10b981',
                    fillcolor='rgba(16, 185, 129, 0.3)'
                ))
                
                fig.update_layout(
                    title="Box Plot - Ph√¢n t√≠ch t·ª© ph√¢n v·ªã",
                    yaxis_title="M·ª©c l∆∞∆°ng (tri·ªáu VNƒê)",
                    height=450,
                    showlegend=False
                )
                st.plotly_chart(fig, use_container_width=True)
            
            # Detailed salary brackets analysis
            salary_brackets = [
                (0, 8, "Entry Level", "#ef4444"),
                (8, 15, "Junior", "#f97316"), 
                (15, 25, "Mid-level", "#eab308"),
                (25, 40, "Senior", "#22c55e"),
                (40, 200, "Expert/Lead", "#8b5cf6")
            ]
            
            bracket_analysis = []
            for min_sal, max_sal, level, color in salary_brackets:
                count = len(salary_data[
                    (salary_data['salary_avg_million_vnd'] >= min_sal) & 
                    (salary_data['salary_avg_million_vnd'] < max_sal)
                ])
                percentage = (count / len(salary_data)) * 100
                bracket_analysis.append({
                    'level': level,
                    'range': f"{min_sal}-{max_sal}M",
                    'count': count,
                    'percentage': percentage,
                    'color': color
                })
            
            # Salary bracket visualization
            st.markdown("### üéØ Ph√¢n t√≠ch theo khung l∆∞∆°ng")
            
            col1, col2 = st.columns([3, 2])
            
            with col1:
                fig = px.bar(
                    x=[b['level'] for b in bracket_analysis],
                    y=[b['count'] for b in bracket_analysis],
                    title="Ph√¢n b·ªë s·ªë l∆∞·ª£ng vi·ªác l√†m theo khung l∆∞∆°ng",
                    color=[b['percentage'] for b in bracket_analysis],
                    color_continuous_scale='viridis',
                    text=[f"{b['count']} jobs<br>({b['percentage']:.1f}%)" for b in bracket_analysis]
                )
                fig.update_traces(textposition='inside')
                fig.update_layout(height=400, showlegend=False)
                fig.update_coloraxes(showscale=False)
                st.plotly_chart(fig, use_container_width=True)
            
            with col2:
                st.markdown("""
                <div style="background: white; border: 2px solid #e5e7eb; border-radius: 15px; 
                            padding: 1.5rem; height: 350px; overflow-y: auto;">
                    <h5 style="color: #374151; margin-bottom: 1rem; text-align: center;">üìä Chi ti·∫øt khung l∆∞∆°ng</h5>
                """, unsafe_allow_html=True)
                
                for bracket in bracket_analysis:
                    st.markdown(f"""
                    <div style="display: flex; align-items: center; padding: 0.75rem; 
                                margin-bottom: 0.5rem; background: {bracket['color']}20; 
                                border-left: 4px solid {bracket['color']}; border-radius: 8px;">
                        <div style="flex: 1;">
                            <div style="font-weight: 600; color: #1f2937;">{bracket['level']}</div>
                            <div style="color: #6b7280; font-size: 0.9rem;">
                                {bracket['range']} - {bracket['count']:,} jobs ({bracket['percentage']:.1f}%)
                            </div>
                        </div>
                    </div>
                    """, unsafe_allow_html=True)
                
                st.markdown("</div>", unsafe_allow_html=True)
            
            # Salary insights
            high_salary_count = len(salary_data[salary_data['salary_avg_million_vnd'] >= 40])
            high_salary_percent = (high_salary_count / len(salary_data)) * 100
            entry_level_count = len(salary_data[salary_data['salary_avg_million_vnd'] < 8])
            entry_level_percent = (entry_level_count / len(salary_data)) * 100
            
            col1, col2 = st.columns(2)
            with col1:
                st.markdown(f"""
                <div class="timeline-item">
                    <div class="timeline-title">üíé Premium Positions</div>
                    <div class="timeline-content">
                        <span class="highlight-number">{high_salary_percent:.1f}%</span> v·ªã tr√≠ c√≥ l∆∞∆°ng ‚â• 40M VNƒê
                        <br><strong>Insight:</strong> C∆° h·ªôi thu nh·∫≠p cao v·∫´n khan hi·∫øm, 
                        ph·∫ßn l·ªõn t·∫≠p trung ·ªü c√°c v·ªã tr√≠ leadership, specialist, ho·∫∑c emerging tech.
                    </div>
                </div>
                """, unsafe_allow_html=True)
            
            with col2:
                st.markdown(f"""
                <div class="timeline-item">
                    <div class="timeline-title">üå± Entry Opportunities</div>
                    <div class="timeline-content">
                        <span class="highlight-number">{entry_level_percent:.1f}%</span> v·ªã tr√≠ entry-level (<8M)
                        <br><strong>Insight:</strong> Th·ªã tr∆∞·ªùng v·∫´n m·ªü c·ª≠a cho ng∆∞·ªùi m·ªõi, 
                        nh∆∞ng c·∫°nh tranh s·∫Ω cao ·ªü ph√¢n kh√∫c n√†y.
                    </div>
                </div>
                """, unsafe_allow_html=True)
            
            # Salary distribution analysis
            st.markdown(f"""
            <div class="insight-box">
                <div class="insight-title">üìà Ph√¢n t√≠ch s√¢u v·ªÅ c·∫•u tr√∫c l∆∞∆°ng</div>
                <div class="insight-content">
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 2rem; margin-bottom: 2rem;">
                        <div style="text-align: center; padding: 1.5rem; background: #fef3c7; border-radius: 10px;">
                            <h4 style="color: #92400e; margin: 0; font-size: 1.8rem;">{salary_stats['median']:.1f}M</h4>
                            <p style="margin: 0.5rem 0 0 0; font-weight: 600; color: #78350f;">L∆∞∆°ng trung v·ªã</p>
                            <small style="color: #a16207;">50% ng∆∞·ªùi ki·∫øm ƒë∆∞·ª£c m·ª©c n√†y</small>
                        </div>
                        <div style="text-align: center; padding: 1.5rem; background: #ecfdf5; border-radius: 10px;">
                            <h4 style="color: #166534; margin: 0; font-size: 1.8rem;">{salary_stats['q75']:.1f}M</h4>
                            <p style="margin: 0.5rem 0 0 0; font-weight: 600; color: #15803d;">Quartile 75%</p>
                            <small style="color: #059669;">Top 25% ki·∫øm ƒë∆∞·ª£c m·ª©c n√†y</small>
                        </div>
                        <div style="text-align: center; padding: 1.5rem; background: #eff6ff; border-radius: 10px;">
                            <h4 style="color: #1e40af; margin: 0; font-size: 1.8rem;">{(salary_stats['q75'] - salary_stats['q25']):.1f}M</h4>
                            <p style="margin: 0.5rem 0 0 0; font-weight: 600; color: #3730a3;">IQR Range</p>
                            <small style="color: #4f46e5;">Kho·∫£ng c√°ch gi·ªØa Q1 v√† Q3</small>
                        </div>
                        <div style="text-align: center; padding: 1.5rem; background: #fef2f2; border-radius: 10px;">
                            <h4 style="color: #dc2626; margin: 0; font-size: 1.8rem;">{salary_stats['std']:.1f}M</h4>
                            <p style="margin: 0.5rem 0 0 0; font-weight: 600; color: #b91c1c;">ƒê·ªô l·ªách chu·∫©n</p>
                            <small style="color: #dc2626;">M·ª©c ƒë·ªô ph√¢n t√°n l∆∞∆°ng</small>
                        </div>
                    </div>
                    
                    <div style="background: #f8fafc; padding: 2rem; border-radius: 10px; border-left: 4px solid #3b82f6;">
                        <h5 style="color: #1e40af; margin-bottom: 1rem;">üîç Nh·ªØng ƒëi·ªÅu th√∫ v·ªã v·ªÅ l∆∞∆°ng IT</h5>
                        
                        <div style="margin-bottom: 1rem;">
                            <strong>üí∞ S·ª± ch√™nh l·ªách l∆∞∆°ng:</strong> ƒê·ªô l·ªách chu·∫©n {salary_stats['std']:.1f}M cho th·∫•y 
                            s·ª± ch√™nh l·ªách l·ªõn gi·ªØa c√°c v·ªã tr√≠, ph·∫£n √°nh t√≠nh ƒëa d·∫°ng c·ªßa ng√†nh v√† t·∫ßm quan tr·ªçng c·ªßa specialization.
                        </div>
                        
                        <div style="margin-bottom: 1rem;">
                            <strong>üìä Ph√¢n ph·ªëi kh√¥ng ƒë·ªÅu:</strong> S·ª± kh√°c bi·ªát gi·ªØa trung b√¨nh ({salary_stats['mean']:.1f}M) 
                            v√† trung v·ªã ({salary_stats['median']:.1f}M) cho th·∫•y m·ªôt s·ªë v·ªã tr√≠ c√≥ m·ª©c l∆∞∆°ng r·∫•t cao, k√©o trung b√¨nh l√™n.
                        </div>
                        
                        <div style="margin: 0;">
                            <strong>üéØ Sweet spot:</strong> Kho·∫£ng {salary_stats['q25']:.1f}M - {salary_stats['q75']:.1f}M 
                            l√† "v√πng an to√†n" cho 50% gi·ªØa c·ªßa th·ªã tr∆∞·ªùng, l√† m·ª•c ti√™u th·ª±c t·∫ø cho ƒëa s·ªë IT professionals.
                        </div>
                    </div>
                </div>
            </div>
            """, unsafe_allow_html=True)
    
    # Chapter 4: Kinh nghi·ªám & C∆° h·ªôi
    st.markdown("""
    <div class="chapter">
        <div class="chapter-number">Ch∆∞∆°ng 4</div>
        <div class="chapter-title">üéØ The Career Ladder: H√†nh tr√¨nh t·ª´ Fresher ƒë·∫øn Tech Leader</div>
    </div>
    """, unsafe_allow_html=True)
    
    # Experience introduction
    st.markdown("""
    <div style="background: linear-gradient(135deg, #fef7cd 0%, #fef3c7 100%); 
                border-left: 5px solid #f59e0b; padding: 2rem; border-radius: 15px; margin: 2rem 0;">
        <h4 style="color: #92400e; margin-bottom: 1rem;">üöÄ Career progression trong IT</h4>
        <p style="font-size: 1.1rem; line-height: 1.8; margin-bottom: 1rem; color: #78350f;">
            Ng√†nh IT c√≥ l·∫Ω l√† m·ªôt trong nh·ªØng ng√†nh c√≥ career ladder r√µ r√†ng nh·∫•t, nh∆∞ng c≈©ng ƒë·∫ßy th√°ch th·ª©c. 
            M·ªói b·∫≠c kinh nghi·ªám kh√¥ng ch·ªâ ƒë∆°n thu·∫ßn v·ªÅ s·ªë nƒÉm l√†m vi·ªác, m√† c√≤n v·ªÅ depth of knowledge, 
            leadership skills, v√† kh·∫£ nƒÉng adapt v·ªõi c√¥ng ngh·ªá m·ªõi.
        </p>
        <div style="background: #fcd34d; padding: 1rem; border-radius: 8px;">
            <p style="margin: 0; font-style: italic; color: #92400e; font-weight: 500;">
                "Trong IT, 2 nƒÉm kinh nghi·ªám th·ª±c s·ª± c√≥ th·ªÉ qu√Ω h∆°n 5 nƒÉm kinh nghi·ªám b√¨nh th∆∞·ªùng. 
                Quality over quantity lu√¥n l√† nguy√™n t·∫Øc v√†ng."
            </p>
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    # Experience analysis
    if 'experience_years' in df.columns:
        # Count jobs for freshers
        fresher_data = df[df['experience_years'].str.contains('kh√¥ng y√™u c·∫ßu|intern', case=False, na=False)]
        fresher_count = len(fresher_data)
        fresher_percent = (fresher_count / len(df)) * 100
        
        # Experience vs Salary scatter plot
        if 'exp_numeric' in df.columns and 'salary_avg_million_vnd' in df.columns:
            scatter_data = df[(df['salary_avg_million_vnd'] > 0) & (df['exp_numeric'] >= 0)]
            if not scatter_data.empty:
                fig = px.scatter(
                    scatter_data,
                    x='exp_numeric',
                    y='salary_avg_million_vnd',
                    color='city' if 'city' in df.columns else None,
                    size='salary_avg_million_vnd',
                    title="M·ªëi quan h·ªá gi·ªØa Kinh nghi·ªám v√† M·ª©c l∆∞∆°ng",
                    hover_data=['title', 'company'] if all(col in df.columns for col in ['title', 'company']) else None
                )
                fig.update_layout(
                    xaxis_title="S·ªë nƒÉm kinh nghi·ªám",
                    yaxis_title="M·ª©c l∆∞∆°ng (tri·ªáu VNƒê)",
                    height=500
                )
                st.plotly_chart(fig, use_container_width=True)
        
        st.markdown(f"""
        <div class="insight-box">
            <div class="insight-title">üå± C∆° h·ªôi cho ng∆∞·ªùi m·ªõi</div>
            <div class="insight-content">
                C√≥ <span class="highlight-number">{fresher_percent:.1f}%</span> 
                ({fresher_count:,} v·ªã tr√≠) kh√¥ng y√™u c·∫ßu kinh nghi·ªám, 
                t·∫°o c∆° h·ªôi t·ªët cho sinh vi√™n m·ªõi ra tr∆∞·ªùng v√† nh·ªØng ng∆∞·ªùi chuy·ªÉn ng√†nh.
            </div>
        </div>
        """, unsafe_allow_html=True)
    
    # Chapter 5: K·ªπ nƒÉng hot nh·∫•t
    st.markdown("""
    <div class="chapter">
        <div class="chapter-number">Ch∆∞∆°ng 5</div>
        <div class="chapter-title">üöÄ The Skills Economy: K·ªπ nƒÉng n√†o ƒëang ƒë·ªãnh h√¨nh t∆∞∆°ng lai IT?</div>
    </div>
    """, unsafe_allow_html=True)
    
    # Skills introduction
    st.markdown("""
    <div style="background: linear-gradient(135deg, #ecfdf5 0%, #d1fae5 100%); 
                border-left: 5px solid #10b981; padding: 2rem; border-radius: 15px; margin: 2rem 0;">
        <h4 style="color: #065f46; margin-bottom: 1rem;">‚ö° The Skills Revolution</h4>
        <p style="font-size: 1.1rem; line-height: 1.8; margin-bottom: 1rem; color: #064e3b;">
            Trong th·ªùi ƒë·∫°i m√† c√¥ng ngh·ªá thay ƒë·ªïi v·ªõi t·ªëc ƒë·ªô ch√≥ng m·∫∑t, k·ªπ nƒÉng tr·ªü th√†nh currency m·ªõi 
            c·ªßa th·ªã tr∆∞·ªùng lao ƒë·ªông IT. Kh√¥ng ch·ªâ l√† hard skills v·ªÅ programming, m√† c√≤n bao g·ªìm 
            soft skills, emerging technologies, v√† kh·∫£ nƒÉng h·ªçc h·ªèi li√™n t·ª•c.
        </p>
        <div style="background: #a7f3d0; padding: 1rem; border-radius: 8px;">
            <p style="margin: 0; font-style: italic; color: #064e3b; font-weight: 500;">
                "Trong IT, skill set c·ªßa b·∫°n h√¥m qua c√≥ th·ªÉ ƒë√£ l·ªói th·ªùi. Nh∆∞ng kh·∫£ nƒÉng adapt 
                v√† h·ªçc skills m·ªõi s·∫Ω kh√¥ng bao gi·ªù l·ªói th·ªùi."
            </p>
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    # Skills analysis
    if 'skills' in df.columns:
        all_skills = []
        for skills_list in df['skills'].dropna():
            if isinstance(skills_list, list):
                all_skills.extend(skills_list)
            elif isinstance(skills_list, str):
                all_skills.append(skills_list)
        
        if all_skills:
            skills_freq = {}
            for skill in all_skills:
                skills_freq[skill] = skills_freq.get(skill, 0) + 1
            
            top_skills = sorted(skills_freq.items(), key=lambda x: x[1], reverse=True)[:10]
            skills_df = pd.DataFrame(top_skills, columns=['K·ªπ nƒÉng', 'S·ªë l∆∞·ª£ng job'])
            
            fig = px.bar(
                skills_df,
                x='S·ªë l∆∞·ª£ng job',
                y='K·ªπ nƒÉng',
                orientation='h',
                title="Top 10 k·ªπ nƒÉng ƒë∆∞·ª£c y√™u c·∫ßu nhi·ªÅu nh·∫•t",
                color_discrete_sequence=['#06b6d4']
            )
            fig.update_layout(
                height=500,
                yaxis={'categoryorder': 'total ascending'}
            )
            st.plotly_chart(fig, use_container_width=True)
            
            # Top skill insight
            top_skill = top_skills[0][0]
            top_skill_count = top_skills[0][1]
            
            st.markdown(f"""
            <div class="insight-box">
                <div class="insight-title">üéØ K·ªπ nƒÉng v√†ng</div>
                <div class="insight-content">
                    <strong>{top_skill}</strong> l√† k·ªπ nƒÉng ƒë∆∞·ª£c y√™u c·∫ßu nhi·ªÅu nh·∫•t v·ªõi 
                    <span class="highlight-number">{top_skill_count}</span> v·ªã tr√≠. 
                    ƒê√¢y l√† kim ch·ªâ nam quan tr·ªçng cho vi·ªác ƒë·ªãnh h∆∞·ªõng h·ªçc t·∫≠p v√† ph√°t tri·ªÉn k·ªπ nƒÉng.
                </div>
            </div>
            """, unsafe_allow_html=True)
    
    # Chapter 6: Lƒ©nh v·ª±c n·ªïi b·∫≠t
    st.markdown("""
    <div class="chapter">
        <div class="chapter-number">Ch∆∞∆°ng 6</div>
        <div class="chapter-title">‚≠ê Nh·ªØng lƒ©nh v·ª±c ƒëang l√™n</div>
    </div>
    """, unsafe_allow_html=True)
    
    # Category analysis
    if 'category' in df.columns:
        category_counts = df['category'].value_counts()
        
        # Create treemap for categories
        fig = px.treemap(
            names=category_counts.index,
            parents=[""] * len(category_counts),
            values=category_counts.values,
            title="B·∫£n ƒë·ªì ph√¢n b·ªë theo lƒ©nh v·ª±c IT"
        )
        fig.update_layout(height=500)
        st.plotly_chart(fig, use_container_width=True)
        
        # Category insights
        top_category = category_counts.index[0]
        top_category_count = category_counts.iloc[0]
        top_category_percent = (top_category_count / len(df)) * 100
        
        # Salary by category
        if 'salary_avg_million_vnd' in df.columns:
            salary_by_category = df[df['salary_avg_million_vnd'] > 0].groupby('category')['salary_avg_million_vnd'].mean().sort_values(ascending=False)
            if not salary_by_category.empty:
                highest_paid_field = salary_by_category.index[0]
                highest_salary = salary_by_category.iloc[0]
                
                col1, col2 = st.columns(2)
                with col1:
                    st.markdown(f"""
                    <div class="timeline-item">
                        <div class="timeline-title">Lƒ©nh v·ª±c ph·ªï bi·∫øn nh·∫•t</div>
                        <div class="timeline-content">
                            <strong>{top_category}</strong><br>
                            <span class="highlight-number">{top_category_percent:.1f}%</span> th·ªã tr∆∞·ªùng
                        </div>
                    </div>
                    """, unsafe_allow_html=True)
                
                with col2:
                    st.markdown(f"""
                    <div class="timeline-item">
                        <div class="timeline-title">Lƒ©nh v·ª±c l∆∞∆°ng cao nh·∫•t</div>
                        <div class="timeline-content">
                            <strong>{highest_paid_field}</strong><br>
                            <span class="highlight-number">{highest_salary:.1f}M</span> VNƒê trung b√¨nh
                        </div>
                    </div>
                    """, unsafe_allow_html=True)
    
    # Final insights and conclusion
    st.markdown("""
    <div class="chapter">
        <div class="chapter-number">K·∫øt lu·∫≠n</div>
        <div class="chapter-title">üéØ Nh·ªØng ƒëi·ªÅu r√∫t ra ƒë∆∞·ª£c</div>
    </div>
    """, unsafe_allow_html=True)
    
    # Key takeaways
    st.markdown("""
    <div class="insight-box">
        <div class="insight-title">üîë Key Takeaways</div>
        <div class="insight-content">
            <strong>1. Th·ªã tr∆∞·ªùng ƒëang ph√°t tri·ªÉn m·∫°nh:</strong> V·ªõi h√†ng ngh√¨n c∆° h·ªôi vi·ªác l√†m t·ª´ nhi·ªÅu c√¥ng ty kh√°c nhau.<br><br>
            <strong>2. C∆° h·ªôi cho m·ªçi tr√¨nh ƒë·ªô:</strong> T·ª´ fresher ƒë·∫øn senior ƒë·ªÅu c√≥ ch·ªó ƒë·ª©ng trong th·ªã tr∆∞·ªùng.<br><br>
            <strong>3. M·ª©c l∆∞∆°ng c·∫°nh tranh:</strong> Ng√†nh IT v·∫´n duy tr√¨ ƒë∆∞·ª£c m·ª©c l∆∞∆°ng h·∫•p d·∫´n so v·ªõi c√°c ng√†nh kh√°c.<br><br>
            <strong>4. K·ªπ nƒÉng l√† ch√¨a kh√≥a:</strong> Vi·ªác n·∫Øm v·ªØng c√°c c√¥ng ngh·ªá hot s·∫Ω m·ªü ra nhi·ªÅu c∆° h·ªôi h∆°n.<br><br>
            <strong>5. T·∫≠p trung ƒë·ªãa l√Ω:</strong> C√°c th√†nh ph·ªë l·ªõn v·∫´n l√† trung t√¢m c·ªßa ng√†nh c√¥ng ngh·ªá.
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    # Call to action
    st.markdown("""
    <div class="cta-section">
        <div class="cta-title">üöÄ H√†nh ƒë·ªông ngay h√¥m nay!</div>
        <div class="cta-text">
            D·ª±a tr√™n nh·ªØng insight n√†y, h√£y b·∫Øt ƒë·∫ßu h√†nh tr√¨nh ph√°t tri·ªÉn s·ª± nghi·ªáp IT c·ªßa b·∫°n. 
            H·ªçc nh·ªØng k·ªπ nƒÉng hot, x√¢y d·ª±ng portfolio m·∫°nh v√† chu·∫©n b·ªã cho nh·ªØng c∆° h·ªôi tuy·ªát v·ªùi ƒëang ch·ªù ƒë·ª£i!
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    st.markdown('</div>', unsafe_allow_html=True)

if __name__ == "__main__":
    main()